"use strict";var app=app||{};app.util=function(){function coordinateFrom(x,y){return{x:x,y:y}}function copyCoordinate(coordinate){return{x:coordinate.x,y:coordinate.y}}function isCoordinateInMovementSquares(coordinate,movementSquares){for(var i=0;i<movementSquares.length;i++){var currentCoordinate=movementSquares[i];if(coordinate.x===currentCoordinate.x&&coordinate.y===currentCoordinate.y){return true}}return false}function areCoordinatesEqual(coordinate1,coordinate2){return coordinate1.x===coordinate2.x&&coordinate1.y===coordinate2.y}function forEach(iteratable,callback){return Array.prototype.forEach.call(iteratable,callback)}function fetchJsonPolyfill(url,callback){var request=new XMLHttpRequest;request.overrideMimeType("application/json");request.onreadystatechange=function(){if(request.readyState!==XMLHttpRequest.DONE){return}var data=request.response;data=JSON.parse(data);if(request.status<=200&&request.status<300){callback(data)}};request.open("GET",url,true);request.send()}function fetchJson(url,callback){var request=new Request(url);var headers=new Headers;headers.append("Content-Type","application/json");fetch(request,{headers:headers}).then(function(response){return response.json()}).then(function(json){callback(json)})}function getJson(url,callback){if(window.fetch){fetchJson(url,callback)}else{fetchJsonPolyfill(url,callback)}}function cloneObject(object){return JSON.parse(JSON.stringify(object))}return{copyCoordinate:copyCoordinate,isCoordinateInMovementSquares:isCoordinateInMovementSquares,areCoordinatesEqual:areCoordinatesEqual,coordinateFrom:coordinateFrom,getJson:getJson,forEach:forEach,cloneObject:cloneObject}}();"use strict";var app=app||{};app.templater=function(){function createElement(elementName,textContent,className){var el=document.createElement(elementName);if(textContent){el.textContent=textContent}if(className){el.className=className}return el}return{createElement:createElement}}();"use strict";var app=app||{};app.uiStats=function(){function uiStats(){var stats={};var cursorSprite=document.getElementById("cursor_sprite");stats.cursor={select:{spritesheet:cursorSprite,spriteCoordinate:{x:1,y:0}},attack:{spritesheet:cursorSprite,spriteCoordinate:{x:0,y:0}}};return stats}return{get:uiStats}}();"use strict";(function(util){var $=function(selector){return document.querySelectorAll(selector)};var navLinks=$(".nav-list li");var pageSections=$(".tab[data-tab]");function navLinkClicked(navLink){deselectNavlinks();navLink.classList.add("active");var tabSelector=navLink.dataset.tab;hideAllPageSections();document.querySelector('.tab[data-tab="'+tabSelector+'"]').classList.add("active")}function deselectNavlinks(){util.forEach(navLinks,function(navLink){navLink.classList.remove("active")})}function hideAllPageSections(){util.forEach(pageSections,function(pageSection){pageSection.classList.remove("active")})}util.forEach(navLinks,function(navLink){navLink.onclick=function(){navLinkClicked(navLink)}});navLinkClicked(navLinks[0])})(app.util);"use strict";var app=app||{};app.modal=function(){var modalTextContainer=document.getElementById("modal-text-container");var modalButtonOk=document.getElementById("modal-button-ok");var modalButtonCancel=document.getElementById("modal-button-cancel");var modalWindow=document.getElementById("modal-window");var modalTextInput=document.getElementById("modal-text-input");modalButtonCancel.onclick=function(){hideModal()};function showModal(){document.documentElement.classList.add("show-modal")}function hideModal(){document.documentElement.classList.remove("show-modal")}function resetModal(){modalWindow.classList.remove("prompt");modalWindow.classList.remove("alert");modalButtonOk.classList.remove("btn-default");modalButtonOk.classList.remove("btn-danger");modalButtonOk.classList.remove("btn-primary");modalTextInput.value=null}function alert(alertText){resetModal();modalWindow.classList.add("alert");modalButtonOk.classList.add("btn-default");modalTextContainer.textContent=alertText;modalButtonOk.onclick=function(){hideModal()};showModal()}function confirm(confirmText,confirmCallback){resetModal();modalButtonOk.classList.add("btn-danger");modalTextContainer.textContent=confirmText;modalButtonOk.onclick=function(){hideModal();confirmCallback()};showModal()}function prompt(promptText,callback){resetModal();modalWindow.classList.add("prompt");modalButtonOk.classList.add("btn-primary");modalTextContainer.textContent=promptText;modalButtonOk.onclick=function(){hideModal();callback(modalTextInput.value)};showModal()}return{alert:alert,confirm:confirm,prompt:prompt}}();"use strict";var app=app||{};app.textOverlay=function(){var textOverlayContainer=document.getElementById("text-overlay-container");var textOverlayHeading=document.getElementById("text-overlay-heading");var textOverlayButton=document.getElementById("text-overlay-button");function resetOverlay(){textOverlayContainer.classList.remove("show-heading-animation");textOverlayContainer.classList.remove("show-menu");textOverlayHeading.textContent=""}function showOverlay(){document.documentElement.classList.add("show-text-overlay")}function hideOverlay(){document.documentElement.classList.remove("show-text-overlay")}function displayHeading(heading,duration,callback){callback=callback||function(){};resetOverlay();textOverlayContainer.classList.add("show-heading-animation");textOverlayHeading.textContent=heading;showOverlay();if(duration&&duration>0){setTimeout(function(){hideOverlay();callback()},duration)}else{hideOverlay();callback()}}function displayMenu(heading,buttonText,buttonCallback){resetOverlay();textOverlayContainer.classList.add("show-menu");textOverlayHeading.textContent=heading;textOverlayButton.textContent=buttonText;textOverlayButton.onclick=function(){hideOverlay();buttonCallback()};showOverlay()}return{displayHeading:displayHeading,displayMenu:displayMenu}}();"use strict";var app=app||{};app.damage=function(){function damageForAttack(attackingUnit,defendingUnit,attackingTerrain,defendingTerrain,unitStatsArray,terrainStatsArray){var attackingUnitStats=unitStatsArray[attackingUnit.type];var defendingUnitStats=unitStatsArray[defendingUnit.type];var defendingTerrainStats=terrainStatsArray[defendingTerrain.type];var damage=attackingUnitStats.attackTable[defendingUnit.type];if(defendingUnitStats.applyDefense==true&&defendingTerrainStats.defense==true){return Math.floor(damage*.5)}else{return damage}}function damageForCounterattack(attackingUnit,defendingUnit,attackingTerrain,defendingTerrain,unitStatsArray,terrainStatsArray){var counterDamage=Math.floor(damageForAttack(attackingUnit,defendingUnit,attackingTerrain,defendingTerrain,unitStatsArray,terrainStatsArray)*.5);return counterDamage}return{damageForAttack:damageForAttack,damageForCounterattack:damageForCounterattack}}();"use strict";var app=app||{};app.terrainStats=function(){function terrainStats(){var stats=[];stats.push({name:"Grass",defense:false});stats.push({name:"Mountains",defense:true});stats.push({name:"Trees",defense:true});stats.push({name:"Water",defense:false});stats.push({name:"Edge of water",defense:false});stats.push({name:"Bridge",defense:false});stats.push({name:"Sand",defense:false});stats.push({name:"Deep Water",defense:false});return stats}function terrain(type){return{type:type}}return{get:terrainStats,create:terrain}}();"use strict";var app=app||{};app.unitStats=function(){var UNIT_DIRECTIONS={RIGHT:0,LEFT:1,UP:2,DOWN:3};var TEAMS={PLAYER:0,AI:1};function unitStats(){var stats=[];stats.push({name:"Infantry",spritesheets:[document.getElementById("soldier_red_sprite"),document.getElementById("soldier_blue_sprite")],spriteCoordinates:[[{x:0,y:0},{x:1,y:0}],[{x:0,y:0},{x:1,y:0}]],spriteCoordinatesWhenMoved:[[{x:2,y:0},{x:3,y:0}],[{x:2,y:0},{x:3,y:0}]],canTraverse:[true,true,true,true,true,true,true,false],applyDefense:true,hitpoints:75,attackTable:[30,20,40],movementSpeed:6});stats.push({name:"Tank",spritesheets:[document.getElementById("tank_red_sprite"),document.getElementById("tank_blue_sprite")],spriteCoordinates:[[{x:0,y:0},{x:1,y:0}],[{x:0,y:0},{x:1,y:0}]],spriteCoordinatesWhenMoved:[[{x:2,y:0},{x:3,y:0}],[{x:2,y:0},{x:3,y:0}]],canTraverse:[true,false,false,false,true,true,true,false],applyDefense:false,hitpoints:150,attackTable:[50,40,30],movementSpeed:4});stats.push({name:"Plane",spritesheets:[document.getElementById("plane_red_sprite"),document.getElementById("plane_blue_sprite")],spriteCoordinates:[[{x:0,y:0},{x:1,y:0}],[{x:0,y:0},{x:1,y:0}]],spriteCoordinatesWhenMoved:[[{x:2,y:0},{x:3,y:0}],[{x:2,y:0},{x:3,y:0}]],canTraverse:[true,true,true,true,true,true,true,true],applyDefense:false,hitpoints:100,attackTable:[20,50,30],movementSpeed:8});return stats}function unit(type,team){return{type:type,team:team,health:unitStats()[type].hitpoints,canMove:true,currentDirection:UNIT_DIRECTIONS.LEFT}}return{get:unitStats,create:unit,UNIT_DIRECTIONS:UNIT_DIRECTIONS,TEAMS:TEAMS}}();"use strict";var app=app||{};app.animationStats=function(){function animationStats(){var stats={};stats.explosion={name:"Explosion",type:"static animation",spritesheet:document.getElementById("explosion_spritesheet"),spriteCoordinates:[{x:0,y:0},{x:1,y:0},{x:2,y:0},{x:3,y:0},{x:4,y:0},{x:5,y:0},{x:6,y:0},{x:7,y:0},{x:8,y:0},{x:9,y:0},{x:10,y:0},{x:11,y:0}]};stats.unitDamage={name:"Unit damage",type:"static color animation",colorCells:["rgba(255,0,0, 0.1)","rgba(255,0,0, 0.3)","rgba(255,0,0, 0.3)","rgba(255,0,0, 0.5)","rgba(255,0,0, 0.7)","rgba(255,0,0, 8.0)","rgba(255,0,0, 0.7)","rgba(255,0,0, 0.5)","rgba(255,0,0, 0.3)","rgba(255,0,0, 0.3)","rgba(255,0,0, 0.1)"]};stats.unitAttack=[{name:"Infantry",type:"static animation",spritesheet:document.getElementById("soldier_attack_sprite"),spriteCoordinates:[[{x:0,y:0},{x:1,y:0},{x:3,y:0},{x:3,y:0},{x:3,y:0},{x:3,y:0},{x:0,y:0},{x:1,y:0},{x:3,y:0},{x:3,y:0},{x:3,y:0},{x:3,y:0}],[{x:2,y:0},{x:4,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:2,y:0},{x:4,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0}]]},{name:"Tank",type:"static animation",spritesheet:document.getElementById("tank_attack_sprite"),spriteCoordinates:[[{x:0,y:0},{x:1,y:0},{x:1,y:0},{x:2,y:0},{x:2,y:0},{x:2,y:0},{x:2,y:0},{x:2,y:0}],[{x:3,y:0},{x:4,y:0},{x:4,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0}]]},{name:"Plane",type:"static animation",spritesheet:document.getElementById("plane_attack_sprite"),spriteCoordinates:[[{x:0,y:0},{x:1,y:0},{x:1,y:0},{x:2,y:0},{x:2,y:0},{x:2,y:0}],[{x:3,y:0},{x:4,y:0},{x:4,y:0},{x:5,y:0},{x:5,y:0},{x:5,y:0}]]}];return stats}return{get:animationStats}}();"use strict";var app=app||{};app.levelStats=function(){function levelStats(){var stats=[];stats.push({name:"Level 0",spritesheet:document.getElementById("level1_sprite"),dataUnitsUrls:["data/level1sprites.json","data/level1spriteshard.json"],dataUnits:[],dataTerrainUrl:"data/level1.json",dataTerrain:null});stats.push({name:"Level 1",spritesheet:document.getElementById("level2_sprite"),dataUnitsUrls:["data/level2sprites.json","data/level2spriteshard.json"],dataUnits:[],dataTerrainUrl:"data/level2.json",dataTerrain:null});stats.push({name:"Level 2",spritesheet:document.getElementById("level3_sprite"),dataUnitsUrls:["data/level3sprites.json","data/level3spriteshard.json"],dataUnits:[],dataTerrainUrl:"data/level3.json",dataTerrain:null});return stats}return{get:levelStats}}();"use strict";var app=app||{};app.levelLoader=function(unitStats,terrainStats){function unitFor(dataUnits,column,row,TOTAL_TILES){if(dataUnits.units[column]===undefined||dataUnits.units[column][row]===undefined){return null}var unit;switch(dataUnits.units[column][row]){case 1:unit=unitStats.create(0,0);break;case 2:unit=unitStats.create(1,0);break;case 3:unit=unitStats.create(2,0);break;case 4:unit=unitStats.create(0,1);break;case 5:unit=unitStats.create(1,1);break;case 6:unit=unitStats.create(2,1);break;default:unit=null;break}if(unit===null){return unit}if(row<TOTAL_TILES.x/2){unit.currentDirection=unitStats.UNIT_DIRECTIONS.RIGHT}else{unit.currentDirection=unitStats.UNIT_DIRECTIONS.LEFT}return unit}function terrainFor(level,column,row,TOTAL_TILES){var terrainLayers=level.dataTerrain.layers;var layerIndex=TOTAL_TILES.x*row+column;var layer2TerrainId=terrainLayers[1].data[layerIndex];var layer1TerrainId=terrainLayers[0].data[layerIndex];if(layer2TerrainId!==0){return terrainForId(layer2TerrainId)}return terrainForId(layer1TerrainId)}function terrainForId(terrainId){switch(terrainId){case 3:case 4:case 5:case 19:case 20:case 21:case 35:case 36:case 37:return terrainStats.create(6);break;case 472:case 473:case 488:case 489:case 504:case 505:return terrainStats.create(2);break;case 53:case 69:case 85:return terrainStats.create(3);break;case 52:case 54:case 68:case 70:case 84:case 86:return terrainStats.create(4);break;case 23:return terrainStats.create(7);break;case 365:case 381:case 397:return terrainStats.create(5);break;case 460:case 476:return terrainStats.create(1);break;default:return terrainStats.create(0);break}}function initializeLevelData(levelStatsArray,levelUnitDatas,levelTerrainDatas){levelStatsArray.forEach(function(item,index){if(levelUnitDatas[index]){item.dataUnits=levelUnitDatas[index]}if(levelTerrainDatas[index]){item.dataTerrain=levelTerrainDatas[index]}})}return{unitFor:unitFor,terrainFor:terrainFor,initializeLevelData:initializeLevelData}}(app.unitStats,app.terrainStats);"use strict";var app=app||{};app.audioStats=function(){function audioStats(){var stats={units:[]};stats.units.push({name:"Infantry",attackUrl:"sounds/soldierAttackShort.ogg",moveUrl:"sounds/soldierMove.ogg",damageUrl:"",dieUrl:"sounds/death.ogg",move:null,attack:null,damage:null,die:null});stats.units.push({name:"Tank",attackUrl:"sounds/tankAttack.ogg",moveUrl:"sounds/tankMove.ogg",damageUrl:"",dieUrl:"sounds/death.ogg",move:null,attack:null,damage:null,die:null});stats.units.push({name:"Plane",attackUrl:"sounds/planeAttack.ogg",moveUrl:"sounds/planeMove.ogg",damageUrl:"",dieUrl:"sounds/death.ogg",move:null,attack:null,damage:null,die:null});stats.level={passed:{url:"sounds/levelComplete.ogg",audio:null},failed:{url:"sounds/levelFailure.ogg",audio:null}};stats.cursor={select:{url:"sounds/select.ogg",audio:null},deselect:{url:"sounds/deselect.ogg",audio:null}};stats.music=[{url:"sounds/ready-steady-stinger.ogg",audio:null},{url:"sounds/panic-attack-stinger.ogg",audio:null},{url:"sounds/marche-grotesque-stinger.ogg",audio:null},{url:"sounds/visions-of-apocalypse-stinger.ogg",audio:null}];return stats}return{get:audioStats}}();"use strict";var app=app||{};app.mixer=function(){var AudioContext=window.AudioContext||window.webkitAudioContext;var context=new AudioContext;function getAudioBuffer(url,callback,isRetry){var request=new XMLHttpRequest;request.open("GET",url,true);request.responseType="arraybuffer";request.onload=function(){context.decodeAudioData(request.response,function(buffer){callback(buffer)},function(){if(!isRetry){var aacUrl=url.replace(/ogg$/,"aac");getAudioBuffer(aacUrl,callback,true)}else{callback(null)}})};request.send()}function playAudioBuffer(audioBuffer,shouldLoop,delay,duration){if(audioBuffer===null){return null}function stopAfterDuration(gainNode){setTimeout(function(){stopSound(gainNode,2e3)},duration)}var source=context.createBufferSource();source.buffer=audioBuffer;if(shouldLoop){source.loop=true}var gainNode=context.createGain();source.connect(gainNode);gainNode.connect(context.destination);if(delay&&delay>0){setTimeout(function(){source.start(0);if(duration&&duration>0){stopAfterDuration(gainNode)}},delay)}else{source.start(0);if(duration&&duration>0){stopAfterDuration(gainNode)}}return gainNode}function stopSound(gainNode,fadeOutTime){if(gainNode===null){return}if(!fadeOutTime){gainNode.disconnect();return}var stepTime=10;var gainStep=100/(fadeOutTime/stepTime)/100;var numberOfFades=fadeOutTime/stepTime-1;gainNode.gain.value=gainNode.gain.value-gainStep;function fade(){setTimeout(function(){gainNode.gain.value=gainNode.gain.value-gainStep;if(gainNode.gain.value>0){fade()}else{gainNode.disconnect()}},stepTime)}fade()}return{getAudioBuffer:getAudioBuffer,playAudioBuffer:playAudioBuffer,stopSound:stopSound}}();"use strict";var app=app||{};app.renderer=function(util,unitStats,terrainStats,animationStats){var UNIT_STATS=unitStats.get();var TERRAIN_STATS=terrainStats.get();var ANIMATION_STATS=animationStats.get();var DIRECTIONS={RIGHT:0,LEFT:1,UP:2,DOWN:3};var TILE_SIZE=32;var ANIMATION_PIXEL_STEP=2;var ANIMATION_FRAME_DELAY=10;var STATIC_ANIMATION_FRAME_DELAY=200;function totalTiles(canvasParent){return{x:Math.floor(canvasParent.offsetWidth/TILE_SIZE),y:Math.floor(canvasParent.offsetHeight/TILE_SIZE)}}function tileCoordinateToPixelCoordinate(coordinate){return{x:coordinate.x*TILE_SIZE,y:coordinate.y*TILE_SIZE}}function pixelCoordinateToTileCoordinate(coordinate){return{x:Math.floor(coordinate.x/TILE_SIZE),y:Math.floor(coordinate.y/TILE_SIZE)}}function gameTileForCoordinate(coordinate,gameboard){return gameboard[coordinate.x][coordinate.y]}function setCanvasDimensions(canvasParent,canvas){canvas.width=canvasParent.offsetWidth;canvas.height=canvasParent.offsetHeight}function getContext(canvasParent,canvasSelector){var canvas=document.getElementById(canvasSelector);var context=canvas.getContext("2d");setCanvasDimensions(canvasParent,canvas);return context}function drawTileAtPixelCoordinate(canvasContext,image,pixelLocationCoordinate,spriteCoordinate){var spritePixelCoordinate=tileCoordinateToPixelCoordinate(spriteCoordinate);canvasContext.drawImage(image,spritePixelCoordinate.x,spritePixelCoordinate.y,TILE_SIZE,TILE_SIZE,pixelLocationCoordinate.x,pixelLocationCoordinate.y,TILE_SIZE,TILE_SIZE)}function drawTile(canvasContext,image,locationCoordinate,spriteCoordinate){var pixelLocationCoordinate=tileCoordinateToPixelCoordinate(locationCoordinate);drawTileAtPixelCoordinate(canvasContext,image,pixelLocationCoordinate,spriteCoordinate)}function eraseTileAtPixelCoordinate(canvasContext,pixelLocationCoordinate){canvasContext.clearRect(pixelLocationCoordinate.x,pixelLocationCoordinate.y,TILE_SIZE,TILE_SIZE)}function eraseTile(canvasContext,locationCoordinate){var pixelLocationCoordinate=tileCoordinateToPixelCoordinate(locationCoordinate);eraseTileAtPixelCoordinate(canvasContext,pixelLocationCoordinate)}function eraseCanvas(canvasContext){canvasContext.clearRect(0,0,canvasContext.canvas.width,canvasContext.canvas.height)}function renderLevel(canvasContext,levelSprite){canvasContext.drawImage(levelSprite,0,0)}function redrawUnit(canvasContext,coordinate,unit){eraseTile(canvasContext,coordinate);if(unit.health<=0){return}if(unit.canMove){renderUnit(canvasContext,coordinate,unit)}else{renderUnitMoved(canvasContext,coordinate,unit)}}function renderUnitMoved(canvasContext,coordinate,unit){var unitStats=UNIT_STATS[unit.type];drawTile(canvasContext,unitStats.spritesheets[unit.team],coordinate,unitStats.spriteCoordinatesWhenMoved[unit.team][unit.currentDirection]);renderUnitHealthbar(canvasContext,coordinate,unit)}function renderUnit(canvasContext,coordinate,unit){var unitStats=UNIT_STATS[unit.type];drawTile(canvasContext,unitStats.spritesheets[unit.team],coordinate,unitStats.spriteCoordinates[unit.team][unit.currentDirection]);renderUnitHealthbar(canvasContext,coordinate,unit)}function renderUnitAtPixelCoordinate(canvasContext,pixelCoordinate,unit){var unitStats=UNIT_STATS[unit.type];drawTileAtPixelCoordinate(canvasContext,unitStats.spritesheets[unit.team],pixelCoordinate,unitStats.spriteCoordinates[unit.team][unit.currentDirection]);renderUnitHealthbarAtPixelCoordinate(canvasContext,pixelCoordinate,unit)}function renderUnitHealthbarAtPixelCoordinate(canvasContext,pixelCoordinate,unit){var healthPercentage=unit.health/UNIT_STATS[unit.type].hitpoints;if(healthPercentage>=1){return}var topPixelOffset=4;var healthbarPadding=2;var healthbarLength=TILE_SIZE-2*healthbarPadding;var healthbarHeight=2;canvasContext.fillStyle="tomato";canvasContext.fillRect(pixelCoordinate.x+healthbarPadding,pixelCoordinate.y+topPixelOffset,healthbarLength,healthbarHeight);canvasContext.fillStyle="lawngreen";canvasContext.fillRect(pixelCoordinate.x+healthbarPadding,pixelCoordinate.y+topPixelOffset,healthbarLength*healthPercentage,healthbarHeight)}function renderUnitHealthbar(canvasContext,coordinate,unit){var pixelCoordinate=tileCoordinateToPixelCoordinate(coordinate);renderUnitHealthbarAtPixelCoordinate(canvasContext,pixelCoordinate,unit)}function renderInitialGameboard(gameboard,unitCanvasContext){var width=gameboard.length;for(var x=0;x<width;x++){var height=gameboard[x].length;for(var y=0;y<height;y++){var currentCoordinate={x:x,y:y};var gameTile=gameTileForCoordinate(currentCoordinate,gameboard);if(gameTile.unit){redrawUnit(unitCanvasContext,currentCoordinate,gameTile.unit)}}}}function renderUnitSelectionOutline(canvasContext,unitCoordinate){var unitPixelCoordinate=tileCoordinateToPixelCoordinate(unitCoordinate);canvasContext.strokeStyle="rgb(0,255,0)";canvasContext.lineWidth=2;canvasContext.strokeRect(unitPixelCoordinate.x,unitPixelCoordinate.y,TILE_SIZE,TILE_SIZE)}function renderSquares(canvasContext,tileCoordinates,fillColor){canvasContext.beginPath();tileCoordinates.forEach(function(coordinate){var pixelCoordinate=tileCoordinateToPixelCoordinate(coordinate);canvasContext.fillStyle=fillColor;canvasContext.rect(pixelCoordinate.x,pixelCoordinate.y,TILE_SIZE,TILE_SIZE)});canvasContext.fill()}function renderUnitAttackSquares(canvasContext,attackTilesCoordinates){renderSquares(canvasContext,attackTilesCoordinates,"rgba(255,0,0, 0.3)")}function renderUnitMovementSquares(canvasContext,movementTilesCoordinates){renderSquares(canvasContext,movementTilesCoordinates,"rgba(0,0,255, 0.5)")}function renderUnitMovementPreview(canvasContext,pathCoordinates){canvasContext.beginPath();pathCoordinates.forEach(function(coordinate){var pixelCoordinate=tileCoordinateToPixelCoordinate(coordinate);eraseTile(canvasContext,coordinate);canvasContext.fillStyle="rgba(0,255,178,0.5)";canvasContext.rect(pixelCoordinate.x,pixelCoordinate.y,TILE_SIZE,TILE_SIZE)});canvasContext.fill()}function orientUnit(startingCoordinate,endingCoordinate,unit){var currentDirection;if(endingCoordinate.x<startingCoordinate.x){currentDirection=DIRECTIONS.LEFT;unit.currentDirection=unitStats.UNIT_DIRECTIONS.LEFT}else if(endingCoordinate.y>startingCoordinate.y){currentDirection=DIRECTIONS.DOWN;if(UNIT_STATS[unit.type].spriteCoordinates[unit.team][unitStats.UNIT_DIRECTIONS.DOWN]){unit.currentDirection=unitStats.UNIT_DIRECTIONS.DOWN}}else if(endingCoordinate.y<startingCoordinate.y){currentDirection=DIRECTIONS.UP;if(UNIT_STATS[unit.type].spriteCoordinates[unit.team][unitStats.UNIT_DIRECTIONS.UP]){unit.currentDirection=unitStats.UNIT_DIRECTIONS.UP}}else{currentDirection=DIRECTIONS.RIGHT;unit.currentDirection=unitStats.UNIT_DIRECTIONS.RIGHT}return currentDirection}function renderUnitMovingBetween(animationCanvasContext,unit,startingCoordinate,endingCoordinate,nextCallback){var DIRECTIONS={RIGHT:0,LEFT:1,UP:2,DOWN:3};var start=null;var startingPixelCoordinate=tileCoordinateToPixelCoordinate(startingCoordinate);var endingPixelCoordinate=tileCoordinateToPixelCoordinate(endingCoordinate);var currentPixelCoordinate=util.copyCoordinate(startingPixelCoordinate);var currentDirection=orientUnit(startingCoordinate,endingCoordinate,unit);function step(timestamp){if(start===null){start=timestamp}var progress=timestamp-start;if(progress<ANIMATION_FRAME_DELAY){window.requestAnimationFrame(step);return}eraseTileAtPixelCoordinate(animationCanvasContext,currentPixelCoordinate);switch(currentDirection){case DIRECTIONS.UP:currentPixelCoordinate.y-=ANIMATION_PIXEL_STEP;break;case DIRECTIONS.LEFT:currentPixelCoordinate.x-=ANIMATION_PIXEL_STEP;break;case DIRECTIONS.RIGHT:currentPixelCoordinate.x+=ANIMATION_PIXEL_STEP;break;default:currentPixelCoordinate.y+=ANIMATION_PIXEL_STEP;break}renderUnitAtPixelCoordinate(animationCanvasContext,currentPixelCoordinate,unit);if(!util.areCoordinatesEqual(currentPixelCoordinate,endingPixelCoordinate)){start=null;window.requestAnimationFrame(step)}else{nextCallback()}}window.requestAnimationFrame(step)}function renderUnitMovement(unitCanvasContext,animationCanvasContext,unit,path,resolveCallback){var startingCoordinate=path[0];renderUnit(animationCanvasContext,startingCoordinate,unit);eraseTile(unitCanvasContext,startingCoordinate);function endingCallback(){var endingCoordinate=path[path.length-1];renderUnit(unitCanvasContext,endingCoordinate,unit);eraseTile(animationCanvasContext,endingCoordinate);resolveCallback()}var i=0;function nextAnimationCallback(){i++;if(i<path.length-1){renderUnitMovingBetween(animationCanvasContext,unit,path[i],path[i+1],nextAnimationCallback)}else{endingCallback()}}if(path.length>1){renderUnitMovingBetween(animationCanvasContext,unit,path[0],path[1],nextAnimationCallback)}else{endingCallback()}}function renderAttack(unitCanvasContext,animationCanvasContext,attackCoordinate,defenseCoordinate,attackingUnit,defendingUnit,damageDone,doneCallback){function finishRenderAttack(){redrawUnit(unitCanvasContext,defenseCoordinate,defendingUnit);if(defendingUnit.health<=0){renderStaticAnimation(animationCanvasContext,ANIMATION_STATS.explosion,defenseCoordinate,doneCallback)}else{doneCallback()}}orientUnit(attackCoordinate,defenseCoordinate,attackingUnit);redrawUnit(unitCanvasContext,attackCoordinate,attackingUnit);var animationsToRender=2;var unitAttackAnimationInfo=ANIMATION_STATS.unitAttack[attackingUnit.type];var unitAttackAnimation={spritesheet:unitAttackAnimationInfo.spritesheet,spriteCoordinates:unitAttackAnimationInfo.spriteCoordinates[attackingUnit.currentDirection]};renderStaticAnimation(animationCanvasContext,unitAttackAnimation,attackCoordinate,function(){animationsToRender--;if(animationsToRender<=0){finishRenderAttack()}});renderStaticColorAnimation(animationCanvasContext,ANIMATION_STATS.unitDamage,defenseCoordinate,function(){animationsToRender--;if(animationsToRender<=0){finishRenderAttack()}})}function renderStaticAnimation(canvasContext,animation,coordinate,doneCallback){var currentSpriteIndex=0;var start=null;function step(timestamp){if(start===null){start=timestamp}var progress=timestamp-start;if(progress<STATIC_ANIMATION_FRAME_DELAY){window.requestAnimationFrame(step);return}eraseTile(canvasContext,coordinate);if(currentSpriteIndex<animation.spriteCoordinates.length){drawTile(canvasContext,animation.spritesheet,coordinate,animation.spriteCoordinates[currentSpriteIndex]);currentSpriteIndex++;window.requestAnimationFrame(step)}else{doneCallback()}}window.requestAnimationFrame(step)}function renderStaticColorAnimation(canvasContext,animation,coordinate,doneCallback){var pixelCoordinate=tileCoordinateToPixelCoordinate(coordinate);var currentColorCellIndex=0;var start=null;function step(timestamp){if(start===null){start=timestamp}var progress=timestamp-start;if(progress<STATIC_ANIMATION_FRAME_DELAY){window.requestAnimationFrame(step);return}eraseTile(canvasContext,coordinate);if(currentColorCellIndex<animation.colorCells.length){canvasContext.fillStyle=animation.colorCells[currentColorCellIndex];canvasContext.fillRect(pixelCoordinate.x,pixelCoordinate.y,TILE_SIZE,TILE_SIZE);currentColorCellIndex++;window.requestAnimationFrame(step)}else{doneCallback()}}window.requestAnimationFrame(step)}return{TILE_SIZE:TILE_SIZE,totalTiles:totalTiles,setCanvasDimensions:setCanvasDimensions,getContext:getContext,tileCoordinateToPixelCoordinate:tileCoordinateToPixelCoordinate,pixelCoordinateToTileCoordinate:pixelCoordinateToTileCoordinate,drawTile:drawTile,eraseTile:eraseTile,eraseCanvas:eraseCanvas,renderInitialGameboard:renderInitialGameboard,gameTileForCoordinate:gameTileForCoordinate,renderUnitSelectionOutline:renderUnitSelectionOutline,renderUnitMovementSquares:renderUnitMovementSquares,renderUnitAttackSquares:renderUnitAttackSquares,renderLevel:renderLevel,renderUnitMovement:renderUnitMovement,renderUnitMovementPreview:renderUnitMovementPreview,renderUnitMoved:renderUnitMoved,renderUnit:renderUnit,redrawUnit:redrawUnit,renderAttack:renderAttack}}(app.util,app.unitStats,app.terrainStats,app.animationStats);"use strict";var app=app||{};app.pathfinder=function(util){function pathFor(startingCoordinate,endingCoordinate,gameboard,unitStatsArray,terrainStatsArray){var unitToBeMoved=gameboard[startingCoordinate.x][startingCoordinate.y].unit;var unitStats=unitStatsArray[unitToBeMoved.type];var validMoves=movementCoordinatesFor(startingCoordinate,gameboard,unitStatsArray,terrainStatsArray);var pathReverse=[];var path=[];if(arrayContainsCoords(validMoves,endingCoordinate.x,endingCoordinate.y)){pathReverse.push(endingCoordinate);while(pathReverse[pathReverse.length-1].x!=startingCoordinate.x||pathReverse[pathReverse.length-1].y!=startingCoordinate.y){var coordinate=getCoordinateFromMoveArray(validMoves,pathReverse[pathReverse.length-1].x,pathReverse[pathReverse.length-1].y);pathReverse.push({x:coordinate.fromX,y:coordinate.fromY})}}else{path.push({x:startingCoordinate.x,y:startingCoordinate.y+1})}for(var ixx=pathReverse.length-1;ixx>=0;ixx--){path.push(pathReverse[ixx])}return path}function AIPathFor(startingCoordinate,targetCoordinate,gameboard,unitStatsArray,terrainStatsArray){var unitToBeMoved=gameboard[startingCoordinate.x][startingCoordinate.y].unit;var unitStats=unitStatsArray[unitToBeMoved.type];var validMoves=AIMultiTurnMovements(startingCoordinate,gameboard,unitStatsArray,terrainStatsArray);var pathReverse=[];var path=[];var possibleTargets=[];if(arrayContainsCoords(validMoves,targetCoordinate.x,targetCoordinate.y)){possibleTargets.push({x:targetCoordinate.x,y:targetCoordinate.y,cost:getCoordinateFromMoveArray(validMoves,targetCoordinate.x,targetCoordinate.y).cost})}if(arrayContainsCoords(validMoves,targetCoordinate.x+1,targetCoordinate.y)){possibleTargets.push({x:targetCoordinate.x+1,y:targetCoordinate.y,cost:getCoordinateFromMoveArray(validMoves,targetCoordinate.x+1,targetCoordinate.y).cost})}if(arrayContainsCoords(validMoves,targetCoordinate.x-1,targetCoordinate.y)){possibleTargets.push({x:targetCoordinate.x-1,y:targetCoordinate.y,cost:getCoordinateFromMoveArray(validMoves,targetCoordinate.x-1,targetCoordinate.y).cost})}if(arrayContainsCoords(validMoves,targetCoordinate.x,targetCoordinate.y+1)){possibleTargets.push({x:targetCoordinate.x,y:targetCoordinate.y+1,cost:getCoordinateFromMoveArray(validMoves,targetCoordinate.x,targetCoordinate.y+1).cost})}if(arrayContainsCoords(validMoves,targetCoordinate.x,targetCoordinate.y-1)){possibleTargets.push({x:targetCoordinate.x,y:targetCoordinate.y-1,cost:getCoordinateFromMoveArray(validMoves,targetCoordinate.x,targetCoordinate.y-1).cost})}var endingCoordinate;if(possibleTargets.length>0){var endingCoordinate=possibleTargets[0]}else{var endingCoordinate=validMoves[0]}if(arrayContainsCoords(validMoves,endingCoordinate.x,endingCoordinate.y)){pathReverse.push(endingCoordinate);while(pathReverse[pathReverse.length-1].x!=startingCoordinate.x||pathReverse[pathReverse.length-1].y!=startingCoordinate.y){var coordinate=getCoordinateFromMoveArray(validMoves,pathReverse[pathReverse.length-1].x,pathReverse[pathReverse.length-1].y);pathReverse.push({x:coordinate.fromX,y:coordinate.fromY,cost:coordinate.cost})}}else{pathReverse.push(validMoves[0]);pathReverse.push(startingCoordinate)}for(var ixx=pathReverse.length-1;ixx>=0;ixx--){path.push(pathReverse[ixx])}return path}function movementCoordinatesFor(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray){var unitToBeMoved=gameboard[unitCoordinate.x][unitCoordinate.y].unit;var unitStats=unitStatsArray[unitToBeMoved.type];var terrain=gameboard[1][2].terrain;if(unitStats.canTraverse[terrain.type]){}var ymax=gameboard[0].length-1;var xmax=gameboard.length-1;var validMoves=[];if(unitCoordinate.x+1<=xmax&&unitStats.canTraverse[gameboard[unitCoordinate.x+1][unitCoordinate.y].terrain.type]&&gameboard[unitCoordinate.x+1][unitCoordinate.y].unit===null){validMoves.push({x:unitCoordinate.x+1,y:unitCoordinate.y,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.x-1>=0&&unitStats.canTraverse[gameboard[unitCoordinate.x-1][unitCoordinate.y].terrain.type]&&gameboard[unitCoordinate.x-1][unitCoordinate.y].unit===null){validMoves.push({x:unitCoordinate.x-1,y:unitCoordinate.y,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.y+1<=ymax&&unitStats.canTraverse[gameboard[unitCoordinate.x][unitCoordinate.y+1].terrain.type]&&gameboard[unitCoordinate.x][unitCoordinate.y+1].unit===null){validMoves.push({x:unitCoordinate.x,y:unitCoordinate.y+1,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.y-1>=0&&unitStats.canTraverse[gameboard[unitCoordinate.x][unitCoordinate.y-1].terrain.type]&&gameboard[unitCoordinate.x][unitCoordinate.y-1].unit===null){validMoves.push({x:unitCoordinate.x,y:unitCoordinate.y-1,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}var nextMoveDist=1;var index=0;while(nextMoveDist<=unitStats.movementSpeed&&index<validMoves.length){if(validMoves[index].x+1<=xmax&&unitStats.canTraverse[gameboard[validMoves[index].x+1][validMoves[index].y].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x+1,validMoves[index].y)&&gameboard[validMoves[index].x+1][validMoves[index].y].unit===null){validMoves.push({x:validMoves[index].x+1,y:validMoves[index].y,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}if(validMoves[index].x-1>=0&&unitStats.canTraverse[gameboard[validMoves[index].x-1][validMoves[index].y].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x-1,validMoves[index].y)&&gameboard[validMoves[index].x-1][validMoves[index].y].unit===null){validMoves.push({x:validMoves[index].x-1,y:validMoves[index].y,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}if(validMoves[index].y+1<=ymax&&unitStats.canTraverse[gameboard[validMoves[index].x][validMoves[index].y+1].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x,validMoves[index].y+1)&&gameboard[validMoves[index].x][validMoves[index].y+1].unit===null){validMoves.push({x:validMoves[index].x,y:validMoves[index].y+1,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}if(validMoves[index].y-1>=0&&unitStats.canTraverse[gameboard[validMoves[index].x][validMoves[index].y-1].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x,validMoves[index].y-1)&&gameboard[validMoves[index].x][validMoves[index].y-1].unit===null){validMoves.push({x:validMoves[index].x,y:validMoves[index].y-1,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}index++;if(index<validMoves.length){nextMoveDist=validMoves[index].cost+1}}return validMoves}function AIMultiTurnMovements(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray){var unitToBeMoved=gameboard[unitCoordinate.x][unitCoordinate.y].unit;var unitStats=unitStatsArray[unitToBeMoved.type];var terrain=gameboard[1][2].terrain;if(unitStats.canTraverse[terrain.type]){}var ymax=gameboard[0].length-1;var xmax=gameboard.length-1;var validMoves=[];if(unitCoordinate.x+1<=xmax&&unitStats.canTraverse[gameboard[unitCoordinate.x+1][unitCoordinate.y].terrain.type]&&gameboard[unitCoordinate.x+1][unitCoordinate.y].unit===null){validMoves.push({x:unitCoordinate.x+1,y:unitCoordinate.y,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.x-1>=0&&unitStats.canTraverse[gameboard[unitCoordinate.x-1][unitCoordinate.y].terrain.type]&&gameboard[unitCoordinate.x-1][unitCoordinate.y].unit===null){validMoves.push({x:unitCoordinate.x-1,y:unitCoordinate.y,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.y+1<=ymax&&unitStats.canTraverse[gameboard[unitCoordinate.x][unitCoordinate.y+1].terrain.type]&&gameboard[unitCoordinate.x][unitCoordinate.y+1].unit===null){validMoves.push({x:unitCoordinate.x,y:unitCoordinate.y+1,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}if(unitCoordinate.y-1>=0&&unitStats.canTraverse[gameboard[unitCoordinate.x][unitCoordinate.y-1].terrain.type]&&gameboard[unitCoordinate.x][unitCoordinate.y-1].unit===null){validMoves.push({x:unitCoordinate.x,y:unitCoordinate.y-1,cost:1,fromX:unitCoordinate.x,fromY:unitCoordinate.y})}var nextMoveDist=1;var index=0;while(index<validMoves.length-1){var offSet=getOffSet({x:validMoves[index].fromX,y:validMoves[index].fromY},validMoves[index]);for(var ixx=0+offSet;ixx<offSet+4;ixx++){if(ixx%4===0){if(validMoves[index].y+1<=ymax&&unitStats.canTraverse[gameboard[validMoves[index].x][validMoves[index].y+1].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x,validMoves[index].y+1)&&gameboard[validMoves[index].x][validMoves[index].y+1].unit===null){validMoves.push({x:validMoves[index].x,y:validMoves[index].y+1,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}}if(ixx%4===1){if(validMoves[index].x-1>=0&&unitStats.canTraverse[gameboard[validMoves[index].x-1][validMoves[index].y].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x-1,validMoves[index].y)&&gameboard[validMoves[index].x-1][validMoves[index].y].unit===null){validMoves.push({x:validMoves[index].x-1,y:validMoves[index].y,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}}if(ixx%4===2){if(validMoves[index].y-1>=0&&unitStats.canTraverse[gameboard[validMoves[index].x][validMoves[index].y-1].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x,validMoves[index].y-1)&&gameboard[validMoves[index].x][validMoves[index].y-1].unit===null){validMoves.push({x:validMoves[index].x,y:validMoves[index].y-1,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}}if(ixx%4===3){if(validMoves[index].x+1<=xmax&&unitStats.canTraverse[gameboard[validMoves[index].x+1][validMoves[index].y].terrain.type]&&!arrayContainsCoords(validMoves,validMoves[index].x+1,validMoves[index].y)&&gameboard[validMoves[index].x+1][validMoves[index].y].unit===null){validMoves.push({x:validMoves[index].x+1,y:validMoves[index].y,cost:validMoves[index].cost+1,fromX:validMoves[index].x,fromY:validMoves[index].y})}}}index++;if(index<validMoves.length){nextMoveDist=validMoves[index].cost+1}}return validMoves}function getOffSet(lastMove,currentMove){var deltaX=currentMove.x-lastMove.x;var deltaY=currentMove.y-lastMove.y;if(deltaX===0&&deltaY===1){return 1}else if(deltaX===-1&&deltaY===0){return 2}else if(deltaX===0&&deltaY===-1){return 3}else{return 0}}function arrayContainsCoords(movesArray,xCoordinate,yCoordinate){for(var ixx=0;ixx<movesArray.length;ixx++){if(movesArray[ixx].x==xCoordinate&&movesArray[ixx].y==yCoordinate){return true}}return false}function getCoordinateFromMoveArray(movesArray,xCoordinate,yCoordinate){for(var ixx=0;ixx<movesArray.length;ixx++){if(movesArray[ixx].x==xCoordinate&&movesArray[ixx].y==yCoordinate){return movesArray[ixx]}}return{x:-1,y:-1}}function attackCoordinatesFor(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray){return stubAttackCoordinatesFor(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray)}function stubAttackCoordinatesFor(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray){var attackingUnit=gameboard[unitCoordinate.x][unitCoordinate.y].unit;var attackCoordinates=[];var movementCoordinates=movementCoordinatesFor(unitCoordinate,gameboard,unitStatsArray,terrainStatsArray);movementCoordinates.push(unitCoordinate);function coordinateContainsEnemyUnit(coordinate){if(gameboard[coordinate.x]===undefined||gameboard[coordinate.x][coordinate.y]===undefined){return false}if(gameboard[coordinate.x][coordinate.y].unit&&gameboard[coordinate.x][coordinate.y].unit.team!==attackingUnit.team){return true}return false}movementCoordinates.forEach(function(coordinate){[util.coordinateFrom(coordinate.x+1,coordinate.y),util.coordinateFrom(coordinate.x-1,coordinate.y),util.coordinateFrom(coordinate.x,coordinate.y+1),util.coordinateFrom(coordinate.x,coordinate.y-1)].forEach(function(adjacentCoordinate){if(coordinateContainsEnemyUnit(adjacentCoordinate)){attackCoordinates.push(adjacentCoordinate)}})});return attackCoordinates}function movementCoordinatesForAttackCoordinate(attackCoordinate,movementCoordinates){function areCoordinatesAdjacent(coordinate1,coordinate2){if(coordinate1.x===coordinate2.x&&(coordinate1.y+1===coordinate2.y||coordinate1.y-1===coordinate2.y)){return true}if(coordinate1.y===coordinate2.y&&(coordinate1.x+1===coordinate2.x||coordinate1.x-1===coordinate2.x)){return true}return false}return movementCoordinates.filter(function(coordinate){return areCoordinatesAdjacent(coordinate,attackCoordinate)})}return{movementCoordinatesFor:movementCoordinatesFor,pathFor:pathFor,attackCoordinatesFor:attackCoordinatesFor,AIPathFor:AIPathFor,AIMultiTurnMovements:AIMultiTurnMovements,movementCoordinatesForAttackCoordinate:movementCoordinatesForAttackCoordinate}}(app.util);"use strict";var app=app||{};app.ai=function(util,pathfinder,unitStats,terrainStats,damageCalculator){var AI_ACTION_TYPES={END_TURN:0,MOVE_UNIT:1,ATTACK_UNIT:2};var AI_DIFFICULTY_LEVELS={EASY:0,HARD:1};function aiActionEndTurn(){return{actionType:AI_ACTION_TYPES.END_TURN}}var HealthRatioForAdvantage=.8;function aiActionMoveUnit(startingCoordinate,endingCoordinate,memoizationObject){return{actionType:AI_ACTION_TYPES.MOVE_UNIT,startingCoordinate:startingCoordinate,endingCoordinate:endingCoordinate,memoizationObject:memoizationObject}}function aiActionAttackUnit(startingCoordinate,endingCoordinate,attackedUnitCoordinate,memoizationObject){return{actionType:AI_ACTION_TYPES.ATTACK_UNIT,startingCoordinate:startingCoordinate,endingCoordinate:endingCoordinate,attackedUnitCoordinate:attackedUnitCoordinate,memoizationObject:memoizationObject}}function aiAction(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject){return aiMain(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject)}function aiMain(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject){var friendlyUnits=[];var enemyUnits=[];var unitsCanAttack=0;if(memoizationObject!==null&&memoizationObject.doneMoving===undefined){memoizationObject.doneMoving=false}for(var i=0;i<gameboard.length;i++){for(var j=0;j<gameboard[i].length;j++){if(gameboard[i][j].unit!==null){if(gameboard[i][j].unit.team===unitStats.TEAMS.PLAYER){enemyUnits.push({x:i,y:j,unit:gameboard[i][j].unit,moves:pathfinder.movementCoordinatesFor({x:i,y:j},gameboard,unitStatsArray,terrainStatsArray)})}if(gameboard[i][j].unit.team===unitStats.TEAMS.AI){friendlyUnits.push({x:i,y:j,unit:gameboard[i][j].unit,moves:pathfinder.movementCoordinatesFor({x:i,y:j},gameboard,unitStatsArray,terrainStatsArray)})}}}}if(memoizationObject!==null&&memoizationObject.EnemyCentroid===undefined){memoizationObject.EnemyCentroid=getUnitCentroid(enemyUnits)}if(memoizationObject!==null&&memoizationObject.AICentroid===undefined){memoizationObject.AICentroid=getUnitCentroid(friendlyUnits)}if(memoizationObject!==null&&memoizationObject.UnitsCanAttack===undefined){for(var ixx=0;ixx<friendlyUnits.length;ixx++){if(friendlyUnits[ixx].unit.canMove){if(pathfinder.attackCoordinatesFor(friendlyUnits[ixx],gameboard,unitStatsArray,terrainStatsArray).length>0){unitsCanAttack++}}}}else{unitsCanAttack=memoizationObject.UnitsCanAttack}memoizationObject.UnitsCanAttack=unitsCanAttack;var unitToMove=null;for(var ixx=0;ixx<friendlyUnits.length;ixx++){if(friendlyUnits[ixx].unit.canMove){unitToMove=friendlyUnits[ixx];break}}if(unitToMove===null){return aiActionEndTurn()}var canAttack=numberThatCanAttack(gameboard,unitStatsArray,terrainStatsArray,memoizationObject,friendlyUnits,enemyUnits);if(canAttack>=1||friendlyUnits.length===1){return attackOptimize(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,friendlyUnits,enemyUnits,canAttack)}var attackCoordinates=pathfinder.attackCoordinatesFor(unitToMove,gameboard,unitStatsArray,terrainStatsArray);if(attackCoordinates.length>0&&difficultyLevel===0){var movementCoordinates=pathfinder.movementCoordinatesFor(unitToMove,gameboard,unitStatsArray,terrainStatsArray);var attackCoordinate=attackCoordinates[Math.floor(Math.random()*attackCoordinates.length)];movementCoordinates.push(unitToMove);var endingCoordinates=pathfinder.movementCoordinatesForAttackCoordinate(attackCoordinate,movementCoordinates);var endingCoordinate=endingCoordinates[Math.floor(Math.random()*endingCoordinates.length)];return aiActionAttackUnit(unitToMove,endingCoordinate,attackCoordinate,memoizationObject)}if(difficultyLevel===1){return groupAndFortify(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,friendlyUnits,enemyUnits)}return blitz(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,unitToMove,enemyUnits)}function attackOptimize(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,AIUnits,enemyUnits,canAttack){if(canAttack===1&&AIUnits.length>1){if(difficultyLevel===1){return groupAndFortify(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,AIUnits,enemyUnits)}else{var unitToMove=null;for(var ixx=0;ixx<AIUnits.length;ixx++){if(AIUnits[ixx].unit.canMove){unitToMove=AIUnits[ixx];break}}if(unitToMove===null){return aiActionEndTurn()}var attackCoordinates=pathfinder.attackCoordinatesFor(unitToMove,gameboard,unitStatsArray,terrainStatsArray);if(attackCoordinates.length>0){var movementCoordinates=pathfinder.movementCoordinatesFor(unitToMove,gameboard,unitStatsArray,terrainStatsArray);var attackCoordinate=attackCoordinates[Math.floor(Math.random()*attackCoordinates.length)];movementCoordinates.push(unitToMove);var endingCoordinates=pathfinder.movementCoordinatesForAttackCoordinate(attackCoordinate,movementCoordinates);var endingCoordinate=endingCoordinates[Math.floor(Math.random()*endingCoordinates.length)];return aiActionAttackUnit(unitToMove,endingCoordinate,attackCoordinate,memoizationObject)}return blitz(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,unitToMove,enemyUnits)}}else{var action=getBestTarget(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,AIUnits,enemyUnits);return action}}function getBestTarget(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,AIUnits,enemyUnits){var bestUnit=null;var bestWeight=0;var attackFrom=null;var attack=null;for(var ixx=0;ixx<AIUnits.length;ixx++){if(AIUnits[ixx].unit.canMove){var moveCoordinates=pathfinder.movementCoordinatesFor(AIUnits[ixx],gameboard,unitStatsArray,terrainStatsArray);var attackCoordinates=pathfinder.attackCoordinatesFor(AIUnits[ixx],gameboard,unitStatsArray,terrainStatsArray);moveCoordinates.push({x:AIUnits[ixx].x,y:AIUnits[ixx].y});for(var iyy=0;iyy<attackCoordinates.length;iyy++){var enemyHP=gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].unit.health;if(arrayContainsCoords(moveCoordinates,attackCoordinates[iyy].x-1,attackCoordinates[iyy].y)){var damageDone=damageCalculator.damageForAttack(AIUnits[ixx].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].unit,gameboard[attackCoordinates[iyy].x-1][attackCoordinates[iyy].y].terrain,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].terrain,unitStatsArray,terrainStatsArray);var tempWeight=0;if(damageDone>enemyHP){tempWeight=2e4/damageDone}else{tempWeight=damageDone}if(tempWeight>bestWeight){bestWeight=tempWeight;attackFrom={x:attackCoordinates[iyy].x-1,y:attackCoordinates[iyy].y};attack={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y};bestUnit=AIUnits[ixx]}}if(arrayContainsCoords(moveCoordinates,attackCoordinates[iyy].x+1,attackCoordinates[iyy].y)){var damageDone=damageCalculator.damageForAttack(AIUnits[ixx].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].unit,gameboard[attackCoordinates[iyy].x+1][attackCoordinates[iyy].y].terrain,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].terrain,unitStatsArray,terrainStatsArray);var tempWeight=0;if(damageDone>enemyHP){tempWeight=2e4/damageDone}else{tempWeight=damageDone}if(tempWeight>bestWeight){bestWeight=tempWeight;attackFrom={x:attackCoordinates[iyy].x+1,y:attackCoordinates[iyy].y};attack={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y};bestUnit=AIUnits[ixx]}}if(arrayContainsCoords(moveCoordinates,attackCoordinates[iyy].x,attackCoordinates[iyy].y+1)){var damageDone=damageCalculator.damageForAttack(AIUnits[ixx].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y+1].terrain,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].terrain,unitStatsArray,terrainStatsArray);var tempWeight=0;if(damageDone>enemyHP){tempWeight=2e4/damageDone}else{tempWeight=damageDone}if(tempWeight>bestWeight){bestWeight=tempWeight;attackFrom={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y+1};attack={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y};bestUnit=AIUnits[ixx]}}if(arrayContainsCoords(moveCoordinates,attackCoordinates[iyy].x,attackCoordinates[iyy].y-1)){var damageDone=damageCalculator.damageForAttack(AIUnits[ixx].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].unit,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y-1].terrain,gameboard[attackCoordinates[iyy].x][attackCoordinates[iyy].y].terrain,unitStatsArray,terrainStatsArray);var tempWeight=0;if(damageDone>enemyHP){tempWeight=2e4/damageDone}else{tempWeight=damageDone}if(tempWeight>bestWeight){bestWeight=tempWeight;attackFrom={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y-1};attack={x:attackCoordinates[iyy].x,y:attackCoordinates[iyy].y};bestUnit=AIUnits[ixx]}}}}}if(bestUnit===null){var unitToMove=null;for(var izz=0;izz<AIUnits.length;izz++){if(AIUnits[izz].unit.canMove){unitToMove=AIUnits[izz]}}if(unitToMove===null){return aiActionEndTurn()}return blitz(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,unitToMove,enemyUnits)}return aiActionAttackUnit(bestUnit,attackFrom,attack,memoizationObject)}function numberThatCanAttack(gameboard,unitStatsArray,terrainStatsArray,memoizationObject,AIUnits,enemyUnits){var count=0;for(var ixx=0;ixx<AIUnits.length;ixx++){var attackCoordinates=pathfinder.attackCoordinatesFor(AIUnits[ixx],gameboard,unitStatsArray,terrainStatsArray);if(attackCoordinates.length>0){count++}}return count}function groupAndFortify(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,AIUnits,enemyUnits){if(memoizationObject.doneMoving!==undefined&&memoizationObject.doneMoving===true){return aiActionEndTurn()}var cover=getNearestCover(gameboard,unitStatsArray,terrainStatsArray,memoizationObject.AICentroid);var defensiveObject=getDeffensiveShape(gameboard,unitStatsArray,terrainStatsArray,cover);var defenseEdge=getDefenseEdgeNearCentroid(memoizationObject.EnemyCentroid,defensiveObject);if(seekCover(AIUnits,enemyUnits)||true){var leftLocations={x:defenseEdge[0].x-defenseEdge[1].x,y:defenseEdge[0].y-defenseEdge[1].y};var rightLocations={x:defenseEdge[defenseEdge.length-1].x-defenseEdge[defenseEdge.length-2].x,y:defenseEdge[defenseEdge.length-1].y-defenseEdge[defenseEdge.length-2].y};var firstLeft={x:defenseEdge[0].x+leftLocations.x,y:defenseEdge[0].y+leftLocations.y};var firstRight={x:defenseEdge[defenseEdge.length-1].x+rightLocations.x,y:defenseEdge[defenseEdge.length-1].y+rightLocations.y};for(var ixx=0;ixx<AIUnits.length;ixx++){if(AIUnits[ixx].unit.canMove){if(AIUnits[ixx].unit.type===0||AIUnits[ixx].unit.type===2){if(!arrayContainsCoords(defenseEdge,AIUnits[ixx].x,AIUnits[ixx].y)){var targetLocation=getAvailableCoverTile(gameboard,defenseEdge);if(targetLocation===null){targetLocation=getTileNearCover(gameboard,defenseEdge,leftLocations,rightLocations)}targetLocation=getPartialPathTarget(gameboard,unitStatsArray,terrainStatsArray,AIUnits[ixx],targetLocation);return aiActionMoveUnit(AIUnits[ixx],targetLocation,memoizationObject)}}else{if(!(AIUnits[ixx].x===firstLeft.x&&AIUnits[ixx].y===firstLeft.y)||AIUnits[ixx].x===firstRight.x&&AIUnits[ixx].y===firstRight.y){var targetLocation=getTileNearCover(gameboard,defenseEdge,leftLocations,rightLocations);targetLocation=getPartialPathTarget(gameboard,unitStatsArray,terrainStatsArray,AIUnits[ixx],targetLocation);return aiActionMoveUnit(AIUnits[ixx],targetLocation,memoizationObject)}}}}}return aiActionEndTurn()}function getPartialPathTarget(gameboard,unitStatsArray,terrainStatsArray,unit,targetLocation){var unitPathToEnemy=pathfinder.AIPathFor(unit,targetLocation,gameboard,unitStatsArray,terrainStatsArray);var moveTo=null;var izz=0;var unitStats=unitStatsArray[unit.unit.type];while(izz<unitPathToEnemy.length&&unitPathToEnemy[izz].cost<=unitStats.movementSpeed){moveTo=unitPathToEnemy[izz];izz++}return moveTo}function getAvailableCoverTile(gameboard,defenseEdge){for(var ixx=0;ixx<defenseEdge.length;ixx++){if(gameboard[defenseEdge[ixx].x][defenseEdge[ixx].y].unit===undefined||gameboard[defenseEdge[ixx].x][defenseEdge[ixx].y].unit===null)return defenseEdge[ixx]}return null}function getTileNearCover(gameboard,defenseEdge,leftAdd,rightAdd){var counter=0;var nextLeft={x:defenseEdge[0].x+leftAdd.x,y:defenseEdge[0].y+leftAdd.y};var nextRight={x:defenseEdge[defenseEdge.length-1].x+rightAdd.x,y:defenseEdge[defenseEdge.length-1].y+rightAdd.y};while(counter<20){if(counter%2===0){if(nextLeft.x<gameboard.length&&nextLeft.x>=0&&nextLeft.y<gameboard[nextLeft.x].length&&nextLeft.y>=0&&(gameboard[nextLeft.x][nextLeft.y].unit===undefined||gameboard[nextLeft.x][nextLeft.y].unit===null)){return nextLeft}else{nextLeft={x:nextLeft.x+leftAdd.x,y:nextLeft.y+leftAdd.y}}}else{if(nextRight.x<gameboard.length&&nextRight.x>0&&nextRight.y<gameboard[nextRight.x].length&&nextRight.y>=0&&(gameboard[nextRight.x][nextRight.y].unit===undefined||gameboard[nextLeft.x][nextLeft.y].unit===null)){return nextRight}else{nextRight={x:nextRight.x+leftAdd.x,y:nextRight.y+leftAdd.y}}}counter++}return null}function seekCover(AIUnits,enemyUnits){var enemyTanks=0;var AITanks=0;var enemyInfantry=0;var AIInfantry=0;for(var ixx=0;ixx<AIUnits.length;ixx++){if(AIUnits[ixx].unit.name==="Tank"){AITanks++}if(AIUnits[ixx].unit.name==="Infantry"){AIInfantry++}}for(var ixx=0;ixx<enemyUnits.length;ixx++){if(enemyUnits[ixx].unit.name==="Tank"){enemyTanks++}if(enemyUnits[ixx].unit.name==="Infantry"){enemyInfantry++}}var enemyHealth=totalHealth(enemyUnits);var AIHealth=totalHealth(AIUnits);if(AIInfantry>=enemyInfantry&&AIInfantry>0){return true}return false}function blitz(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject,unit,enemyUnits){if(unit===null){return aiActionEndTurn()}var pathsToEnemy=[];var minPath=new Array(300);for(var ixx=0;ixx<enemyUnits.length;ixx++){pathsToEnemy.push(pathfinder.AIPathFor(unit,enemyUnits[ixx],gameboard,unitStatsArray,terrainStatsArray));if(minPath.length>pathsToEnemy[ixx].length){minPath=pathsToEnemy[ixx]}}var unitPathToEnemy=minPath;var moveTo=null;var izz=0;var unitStats=unitStatsArray[unit.unit.type];while(izz<unitPathToEnemy.length&&unitPathToEnemy[izz].cost<=unitStats.movementSpeed){moveTo=unitPathToEnemy[izz];izz++}return aiActionMoveUnit(unit,moveTo,memoizationObject)}function getUnitCentroid(unitArray){if(unitArray!==undefined&&unitArray.length>0){var xAvg=0;var yAvg=0;for(var ixx=0;ixx<unitArray.length;ixx++){xAvg+=unitArray[ixx].x;yAvg+=unitArray[ixx].y}xAvg=xAvg/unitArray.length;yAvg=yAvg/unitArray.length}return{x:toInt(xAvg),y:toInt(yAvg)}}function getNearestCover(gameboard,unitStatsArray,terrainStatsArray,centroid){var onBoard=true;var coverFound=false;var x=centroid.x;var y=centroid.y;var coverX=0;var coverY=0;var counter=1;if(terrainStatsArray[gameboard[centroid.x][centroid.y].terrain.type].defense){return{x:centroid.x,y:centroid.y}}while(!coverFound&&counter<20){if(!coverFound){for(var iyy=0;iyy<counter;iyy++){if(y+iyy-counter>-1&&y+iyy-counter<gameboard[x].length&&x+iyy>-1&&x+iyy<gameboard.length){if(terrainStatsArray[gameboard[x+iyy][y+iyy-counter].terrain.type].defense){coverFound=true;coverX=x+iyy;coverY=y+iyy-counter;break}}}}if(!coverFound){for(var ixx=0;ixx<counter;ixx++){if(y+ixx>-1&&y+ixx<gameboard[x].length&&x-ixx+counter>-1&&x-ixx+counter<gameboard.length){if(terrainStatsArray[gameboard[x-ixx+counter][y+ixx].terrain.type].defense){coverFound=true;coverX=x-ixx+counter;coverY=y+ixx;break}}}}if(!coverFound){for(var iyy=0;iyy<counter;iyy++){if(y-iyy+counter>-1&&y-iyy+counter<gameboard[x].length&&x-iyy>-1&&x-iyy<gameboard.length){if(terrainStatsArray[gameboard[x-iyy][y-iyy+counter].terrain.type].defense){coverFound=true;coverX=x-iyy;coverY=y-iyy+counter;break}}}}if(!coverFound){for(var ixx=0;ixx<counter;ixx++){if(y-ixx>-1&&y-ixx<gameboard[x].length&&x+ixx-counter>-1&&x+ixx-counter<gameboard.length){if(terrainStatsArray[gameboard[x+ixx-counter][y-ixx].terrain.type].defense){coverFound=true;coverX=x+ixx-counter;coverY=y-ixx;break}}}}if(coverFound){break;return{x:centroid.x,y:centroid.y}}counter+=1}return{x:coverX,y:coverY}}function toInt(n){return Math.round(Number(n))}function getDeffensiveShape(gameboard,unitStatsArray,terrainStatsArray,coverLocationSeed){var deffensiveTerrain=[];deffensiveTerrain.push(coverLocationSeed);var ixx=0;while(ixx<deffensiveTerrain.length&&ixx<20){if(deffensiveTerrain[ixx].x-1>0&&terrainStatsArray[gameboard[deffensiveTerrain[ixx].x-1][deffensiveTerrain[ixx].y].terrain.type].defense){if(!arrayContainsCoords(deffensiveTerrain,deffensiveTerrain[ixx].x-1,deffensiveTerrain[ixx].y)){deffensiveTerrain.push({x:deffensiveTerrain[ixx].x-1,y:deffensiveTerrain[ixx].y})}}if(deffensiveTerrain[ixx].y+1<gameboard[deffensiveTerrain[ixx].x].length&&terrainStatsArray[gameboard[deffensiveTerrain[ixx].x][deffensiveTerrain[ixx].y+1].terrain.type].defense){if(!arrayContainsCoords(deffensiveTerrain,deffensiveTerrain[ixx].x,deffensiveTerrain[ixx].y+1)){deffensiveTerrain.push({x:deffensiveTerrain[ixx].x,y:deffensiveTerrain[ixx].y+1})}}if(deffensiveTerrain[ixx].x+1<gameboard.length&&terrainStatsArray[gameboard[deffensiveTerrain[ixx].x+1][deffensiveTerrain[ixx].y].terrain.type].defense){if(!arrayContainsCoords(deffensiveTerrain,deffensiveTerrain[ixx].x+1,deffensiveTerrain[ixx].y)){deffensiveTerrain.push({x:deffensiveTerrain[ixx].x+1,y:deffensiveTerrain[ixx].y})}}if(deffensiveTerrain[ixx].y-1>0&&terrainStatsArray[gameboard[deffensiveTerrain[ixx].x][deffensiveTerrain[ixx].y-1].terrain.type].defense){if(!arrayContainsCoords(deffensiveTerrain,deffensiveTerrain[ixx].x,deffensiveTerrain[ixx].y-1)){deffensiveTerrain.push({x:deffensiveTerrain[ixx].x,y:deffensiveTerrain[ixx].y-1})}}ixx++}return deffensiveTerrain}function getDefenseEdgeNearCentroid(centroid,defensiveObject){var closestTile={x:100,y:100};var distanceToTile=closestTile.x*closestTile.x+closestTile.y*closestTile.y;for(var ixx=0;ixx<defensiveObject.length;ixx++){var tempDistance=(defensiveObject[ixx].x-centroid.x)*(defensiveObject[ixx].x-centroid.x)+(defensiveObject[ixx].y-centroid.y)*(defensiveObject[ixx].y-centroid.y);if(tempDistance<distanceToTile){closestTile=defensiveObject[ixx];distanceToTile=tempDistance}}var hasUp=arrayContainsCoords(defensiveObject,closestTile.x,closestTile.y-1);var hasDown=arrayContainsCoords(defensiveObject,closestTile.x,closestTile.y+1);var hasLeft=arrayContainsCoords(defensiveObject,closestTile.x-1,closestTile.y);var hasRight=arrayContainsCoords(defensiveObject,closestTile.x+1,closestTile.y);var currentPosition=closestTile;var edgeArray=[];if(hasDown&&hasRight){edgeArray=[];var downMore=true;while(downMore){if(arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y+1)){currentPosition={x:currentPosition.x,y:currentPosition.y+1}}else{downMore=false}}var moreUp=true;while(moreUp){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x,y:currentPosition.y-1};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreUp=false}}currentPosition={x:currentPosition.x+1,y:currentPosition.y+1};var moreRight=true;while(moreRight){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x+1,y:currentPosition.y};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreRight=false}}}if(hasDown&&hasLeft){edgeArray=[];var downMore=true;while(downMore){if(arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y+1)){currentPosition={x:currentPosition.x,y:currentPosition.y+1}}else{downMore=false}}var moreUp=true;while(moreUp){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x,y:currentPosition.y-1};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreUp=false}}currentPosition={x:currentPosition.x-1,y:currentPosition.y+1};var moreLeft=true;while(moreLeft){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x-1,y:currentPosition.y};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreLeft=false}}}if(hasUp&&hasRight){edgeArray=[];var upMore=true;while(upMore){if(arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y-1)){currentPosition={x:currentPosition.x,y:currentPosition.y-1}}else{upMore=false}}var moreDown=true;while(moreDown){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x,y:currentPosition.y+1};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreDown=false}}currentPosition={x:currentPosition.x+1,y:currentPosition.y-1};var moreRight=true;while(moreRight){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x+1,y:currentPosition.y};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreRight=false}}}if(hasUp&&hasLeft){edgeArray=[];var upMore=true;while(upMore){if(arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y-1)){currentPosition={x:currentPosition.x,y:currentPosition.y-1}}else{upMore=false}}var moreDown=true;while(moreDown){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x,y:currentPosition.y+1};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreDown=false}}currentPosition={x:currentPosition.x-1,y:currentPosition.y-1};var moreLeft=true;while(moreLeft){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x-1,y:currentPosition.y};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreLeft=false}}}var currentPosition=closestTile;if(hasUp&&hasDown){edgeArray=[];var upMore=true;while(upMore){if(arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y-1)){currentPosition={x:currentPosition.x,y:currentPosition.y-1}}else{upMore=false}}var moredown=true;while(moredown){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x,y:currentPosition.y+1};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moredown=false}}}if(hasLeft&&hasRight){edgeArray=[];var leftMore=true;while(leftMore){if(arrayContainsCoords(defensiveObject,currentPosition.x-1,currentPosition.y)){currentPosition={x:currentPosition.x-1,y:currentPosition.y}}else{leftMore=false}}var moreRight=true;while(moreRight){edgeArray.push(currentPosition);currentPosition={x:currentPosition.x+1,y:currentPosition.y};if(!arrayContainsCoords(defensiveObject,currentPosition.x,currentPosition.y)){moreRight=false}}}return edgeArray}function potentialDamageTakenOnMove(gameboard,unitStatsArray,terrainStatsArray,enemyUnits,unit,moveLocation){var xPlusMaxDamage=0;var xMinusMaxDamage=0;var yPlusMaxDamage=0;var yMinusMaxDamage=0;var xPlusCanAttack=0;var xMInusCanAttack=0;var yPlusCanAttack=0;var yMInusCanAttack=0;for(var ixx=0;ixx<enemyUnits.length;ixx++){if(arrayContainsCoords(enemyUnits[ixx].moves,moveLocation.x+1,moveLocation.y)){var damageDone=damageCalculator.damageForAttack(enemyUnits[ixx].unit,unit.unit,gameboard[moveLocation.x+1][moveLocation.y].terrain,gameboard[moveLocation.x][moveLocation.y].terrain,unitStatsArray,terrainStatsArray);xPlusCanAttack++;if(damageDone>xPlusMaxDamage){xPlusMaxDamage=damageDone}}}for(var ixx=0;ixx<enemyUnits.length;ixx++){if(arrayContainsCoords(enemyUnits[ixx].moves,moveLocation.x-1,moveLocation.y)){var damageDone=damageCalculator.damageForAttack(enemyUnits[ixx].unit,unit.unit,gameboard[moveLocation.x-1][moveLocation.y].terrain,gameboard[moveLocation.x][moveLocation.y].terrain,unitStatsArray,terrainStatsArray);xMInusCanAttack++;if(damageDone>xPlusMaxDamage){xMinusMaxDamage=damageDone}}}for(var ixx=0;ixx<enemyUnits.length;ixx++){if(arrayContainsCoords(enemyUnits[ixx].moves,moveLocation.x,moveLocation.y+1)){var damageDone=damageCalculator.damageForAttack(enemyUnits[ixx].unit,unit.unit,gameboard[moveLocation.x][moveLocation.y+1].terrain,gameboard[moveLocation.x][moveLocation.y].terrain,unitStatsArray,terrainStatsArray);yPlusCanAttack++;if(damageDone>xPlusMaxDamage){yPlusMaxDamage=damageDone}}}for(var ixx=0;ixx<enemyUnits.length;ixx++){if(arrayContainsCoords(enemyUnits[ixx].moves,moveLocation.x,moveLocation.y-1)){var damageDone=damageCalculator.damageForAttack(enemyUnits[ixx].unit,unit.unit,gameboard[moveLocation.x][moveLocation.y-1].terrain,gameboard[moveLocation.x][moveLocation.y].terrain,unitStatsArray,terrainStatsArray);yMInusCanAttack++;if(damageDone>xPlusMaxDamage){yMinusMaxDamage=damageDone}}}var maxUnitsAttacking=0;if(xPlusCanAttack>maxUnitsAttacking){maxUnitsAttacking=xPlusCanAttack}if(xMInusCanAttack>maxUnitsAttacking){maxUnitsAttacking=xMInusCanAttack}if(yPlusCanAttack>maxUnitsAttacking){maxUnitsAttacking=yPlusCanAttack}if(yMInusCanAttack>maxUnitsAttacking){maxUnitsAttacking=yMInusCanAttack}var damageTaken=0;if(maxUnitsAttacking>0){if(maxUnitsAttacking==1){if(damageTaken<xPlusMaxDamage){damageTaken=xPlusMaxDamage}if(damageTaken<xMinusMaxDamage){damageTaken=xMinusMaxDamage}if(damageTaken<yPlusMaxDamage){damageTaken=yPlusMaxDamage}if(damageTaken<yMinusMaxDamage){damageTaken=yMinusMaxDamage}}if(maxUnitsAttacking==2){var tempDamage1=0;var tempDamage2=0;if(tempDamage2<xPlusMaxDamage){tempDamage2=xPlusMaxDamage}if(tempDamage2<xMinusMaxDamage){tempDamage1=tempDamage2;tempDamage2=xMinusMaxDamage}if(tempDamage1<yPlusMaxDamage){if(tempDamage2<yPlusMaxDamage){tempDamage1=tempDamage2;tempDamage2=yPlusMaxDamage}else{tempDamage1=yPlusMaxDamage}}if(tempDamage1<yMinusMaxDamage){if(tempDamage2<yMinusMaxDamage){tempDamage1=tempDamage2;tempDamage2=yMinusMaxDamage}else{tempDamage1=yMinusMaxDamage}}damageTaken=tempDamage1+tempDamage2}if(maxUnitsAttacking==3){damageTaken=xPlusMaxDamage+xMinusMaxDamage+yPlusMaxDamage+yMinusMaxDamage}if(maxUnitsAttacking==4){damageTaken=xPlusMaxDamage+xMinusMaxDamage+yPlusMaxDamage+yMinusMaxDamage}}return damageTaken}function totalHealth(unitArray){var health=0;for(var ixx=0;ixx<unitArray.length;ixx++){health+=unitArray[ixx].unit.health}return health}function randomAiAction(gameboard,unitStatsArray,terrainStatsArray,difficultyLevel,memoizationObject){if(Math.random()*100<=20){return aiActionEndTurn()}for(var i=0;i<gameboard.length;i++){var innerArray=gameboard[i];for(var j=0;j<innerArray.length;j++){if(gameboard[i][j].unit&&gameboard[i][j].unit.team===unitStats.TEAMS.AI&&gameboard[i][j].unit.canMove&&Math.random()*100<=70){var unit=gameboard[i][j].unit;var startingCoordinate={x:i,y:j};var movementCoordinates=pathfinder.movementCoordinatesFor(startingCoordinate,gameboard,unitStatsArray,terrainStatsArray);var attackCoordinates=pathfinder.attackCoordinatesFor(startingCoordinate,gameboard,unitStatsArray,terrainStatsArray);if(attackCoordinates.length>0){var attackCoordinate=attackCoordinates[Math.floor(Math.random()*attackCoordinates.length)];movementCoordinates.push(startingCoordinate);var endingCoordinates=pathfinder.movementCoordinatesForAttackCoordinate(attackCoordinate,movementCoordinates);var endingCoordinate=endingCoordinates[Math.floor(Math.random()*endingCoordinates.length)];return aiActionAttackUnit(startingCoordinate,endingCoordinate,attackCoordinate,memoizationObject)}else{var endingCoordinate=movementCoordinates[Math.floor(Math.random()*movementCoordinates.length)];return aiActionMoveUnit(startingCoordinate,endingCoordinate,memoizationObject)}}}}return aiActionEndTurn()}function arrayContainsCoords(inArray,xCoordinate,yCoordinate){for(var ixx=0;ixx<inArray.length;ixx++){if(inArray[ixx].x==xCoordinate&&inArray[ixx].y==yCoordinate){return true}}return false}return{ACTION_TYPES:AI_ACTION_TYPES,DIFFICULTY_LEVELS:AI_DIFFICULTY_LEVELS,aiAction:aiAction}}(app.util,app.pathfinder,app.unitStats,app.terrainStats,app.damage);"use strict";var app=app||{};app.saveGame=function(util){function serializeGameboard(gameboard){var serializedGameboard=new Array(gameboard.length);for(var i=0;i<gameboard.length;i++){var subarray=gameboard[i];serializedGameboard[i]=new Array(subarray.length);for(var j=0;j<subarray.length;j++){serializedGameboard[i][j]={};serializedGameboard[i][j].unit=util.cloneObject(gameboard[i][j].unit)}}return serializedGameboard}function userInfoToGameMetadata(userInfo){var gameMetadata={};gameMetadata.difficultyLevel=userInfo.difficultyLevel;gameMetadata.levelIndex=userInfo.levelIndex;gameMetadata.turnNum=userInfo.turnNum;return gameMetadata}function createSave(name,gameboard,gameMetadata){var date=new Date;var year=date.getFullYear();var month=date.getMonth()+1;if(month<10)month="0"+month;var day=date.getDate();if(day<10)day="0"+day;var hours=date.getHours();if(hours<10)hours="0"+hours;var minutes=date.getMinutes();if(minutes<10)minutes="0"+minutes;var seconds=date.getSeconds();if(seconds<10)seconds="0"+seconds;var timestamp=year+"/"+month+"/"+day+" "+hours+":"+minutes+":"+seconds;var id;if(localStorage.length==0){id="capricornus0"}else{var data=JSON.parse(localStorage.getItem(localStorage.key(localStorage.length-1)));var prevId=data["id"].substring(11);var num=Number(prevId);num++;id="capricornus"+num}var state={id:id,name:name,gameboard:gameboard,gameMetadata:gameMetadata,formattedDate:timestamp};try{localStorage.setItem(id,JSON.stringify(state));return true}catch(exception){return false}}function deleteSave(savegameId){if(localStorage.getItem(savegameId)!=null){try{localStorage.removeItem(savegameId);return true}catch(exception){return false}}return false}function getSave(savegameId){if(localStorage.getItem(savegameId)!=null)return JSON.parse(localStorage.getItem(savegameId));return null}function getSaves(){var saveArr=[];for(var i=0;i<localStorage.length;i++){var data=JSON.parse(localStorage.getItem(localStorage.key(i)));saveArr.push({id:data["id"],name:data["name"],formattedDate:data["formattedDate"],gameMetadata:data["gameMetadata"]})}saveArr.sort(function(a,b){return(a.formattedDate<b.formattedDate)-(a.formattedDate>b.formattedDate)});if(saveArr.length>0)return saveArr;else return null}return{getSaves:getSaves,getSave:getSave,deleteSave:deleteSave,createSave:createSave,serializeGameboard:serializeGameboard,userInfoToGameMetadata:userInfoToGameMetadata}}(app.util);"use strict";var app=app||{};app.menu=function(util,levelStats,saveGameController,templater,modal,ai){var SHOW_DEBUG_MENUS=false;(function(){util.forEach(document.querySelectorAll('[data-button-target="main-menu"]'),function(backToMainMenuButton,index){backToMainMenuButton.onclick=function(){displayMainMenu()}})})();function displayMainMenu(){var savedGames=saveGameController.getSaves();if(!savedGames||savedGames.length<=0){document.getElementById("menu_option_load_game").style.display="none"}else{document.getElementById("menu_option_load_game").style.display=""}document.documentElement.classList.remove("load-game-menu");document.documentElement.classList.remove("difficulty-menu");document.documentElement.classList.add("main-menu")}function displayLoadGameMenu(){document.documentElement.classList.remove("main-menu");document.documentElement.classList.remove("difficulty-menu");document.documentElement.classList.add("load-game-menu")}function showDifficultyLevelMenu(levelStatsArray,audioStatsArray,levelIndex,startGameFunc){function startLevel(difficultyLevel){document.documentElement.classList.remove("difficulty-menu");startGameFunc(levelStatsArray,audioStatsArray,levelIndex,difficultyLevel)}var easyDifficultyButton=document.getElementById("difficulty-level-button-easy");var hardDifficultyButton=document.getElementById("difficulty-level-button-hard");easyDifficultyButton.onclick=function(){startLevel(ai.DIFFICULTY_LEVELS.EASY)};hardDifficultyButton.onclick=function(){startLevel(ai.DIFFICULTY_LEVELS.HARD)};document.documentElement.classList.remove("load-game-menu");document.documentElement.classList.remove("main-menu");document.documentElement.classList.add("difficulty-menu")}function initializeLoadgameMenu(levelStatsArray,audioStatsArray,startGameFunc){var savedGames=saveGameController.getSaves();var loadGamelist=document.getElementById("load-game-list");loadGamelist.innerHTML="";if(!savedGames||savedGames.length===0){return}var loadGameListItems=document.createDocumentFragment();savedGames.forEach(function(savedGame){var listItem=templater.createElement("li");var saveGameContainer=templater.createElement("div",null,"menu-item");var saveGameNameContainer=templater.createElement("div",savedGame.name);var saveGameInfoContainer=templater.createElement("div",levelStatsArray[savedGame.gameMetadata.levelIndex].name+" - "+savedGame.formattedDate,"save-game-info");var saveGameDifficultyContainer=templater.createElement("div","Turn: "+(savedGame.gameMetadata.turnNum+1)+" Difficulty: "+(savedGame.gameMetadata.difficultyLevel===ai.DIFFICULTY_LEVELS.HARD?"Hard":"Easy"),"save-game-info");saveGameContainer.appendChild(saveGameNameContainer);saveGameContainer.appendChild(saveGameInfoContainer);saveGameContainer.appendChild(saveGameDifficultyContainer);var deleteButton=templater.createElement("div","Delete","menu-item menu-item-danger");saveGameContainer.onclick=function(){var fullSavedGame=saveGameController.getSave(savedGame.id);document.documentElement.classList.remove("load-game-menu");startGameFunc(levelStatsArray,audioStatsArray,null,null,fullSavedGame)};deleteButton.onclick=function(){modal.confirm("Are you sure you want to delete "+savedGame.name+"?",function(){listItem.remove();saveGameController.deleteSave(savedGame.id)})};listItem.appendChild(saveGameContainer);listItem.appendChild(deleteButton);loadGameListItems.appendChild(listItem)});loadGamelist.appendChild(loadGameListItems)}function initializeMainMenu(levelStatsArray,audioStatsArray,startGameFunc){document.getElementById("menu_option_new_game").onclick=function(){showDifficultyLevelMenu(levelStatsArray,audioStatsArray,0,startGameFunc)};document.getElementById("menu_option_load_game").onclick=function(){initializeLoadgameMenu(levelStatsArray,audioStatsArray,startGameFunc);displayLoadGameMenu()};if(!SHOW_DEBUG_MENUS){return}var mainMenuList=document.getElementById("main-menu-list");var listItems=document.createDocumentFragment();var randomSetupMenuOption=templater.createElement("li","Random Setup");randomSetupMenuOption.onclick=function(){showDifficultyLevelMenu(levelStatsArray,audioStatsArray,-1,startGameFunc)};listItems.appendChild(randomSetupMenuOption);levelStatsArray.forEach(function(level,index){var menuItem=templater.createElement("li",level.name);menuItem.onclick=function(){showDifficultyLevelMenu(levelStatsArray,audioStatsArray,index,startGameFunc)};listItems.appendChild(menuItem)});mainMenuList.appendChild(listItems)}return{initializeMainMenu:initializeMainMenu,displayMainMenu:displayMainMenu}}(app.util,app.levelStats,app.saveGame,app.templater,app.modal,app.ai);"use strict";app.game=function(util,renderer,unitStats,terrainStats,pathfinder,levelStats,ai,damageCalculator,levelLoader,modal,saveGameController,mixer,menu,textOverlay,uiStats){function start(LEVEL_STATS,AUDIO_STATS,levelIndex,difficultyLevel,savedGame){function killMusic(){userInfo.musicBuffers.forEach(function(buffer){if(buffer){mixer.stopSound(buffer,200)}})}function switchMusic(currentTeamIndex,otherTeamIndex){var fadeInTime=null;var otherTeamMusic=userInfo.musicBuffers[otherTeamIndex];if(otherTeamMusic){mixer.stopSound(otherTeamMusic,300)}var musicIndex=currentTeamIndex+userInfo.levelIndex*currentTeamIndex;var currentTeamMusic=AUDIO_STATS.music[musicIndex].audio;userInfo.musicBuffers[currentTeamIndex]=mixer.playAudioBuffer(currentTeamMusic,false,fadeInTime)}function eraseCursor(){if(userInfo.cursor.coordinate){renderer.eraseTile(cursorCanvasContext,userInfo.cursor.coordinate)}}function disableCursor(){eraseCursor();userInfo.cursor.coordinate=null}function drawCursor(coordinate){if(userInfo.cursor.coordinate!=null){if(util.areCoordinatesEqual(userInfo.cursor.coordinate,coordinate)){return}eraseCursor()}userInfo.cursor.coordinate=coordinate;if(isOverTriggerPlayerAttackTile()){renderer.drawTile(cursorCanvasContext,UI_STATS.cursor.attack.spritesheet,userInfo.cursor.coordinate,UI_STATS.cursor.attack.spriteCoordinate)}else{renderer.drawTile(cursorCanvasContext,UI_STATS.cursor.select.spritesheet,userInfo.cursor.coordinate,UI_STATS.cursor.select.spriteCoordinate)}if(userInfo.unitSelected&&renderer.gameTileForCoordinate(userInfo.unitSelected,gameboard).unit.team===unitStats.TEAMS.PLAYER&&util.isCoordinateInMovementSquares(userInfo.cursor.coordinate,userInfo.unitSelectedMovementSquares)){drawUnitMovementPreview(util.copyCoordinate(userInfo.cursor.coordinate))}}function isOverTriggerPlayerAttackTile(){if(!userInfo.unitSelected){return false}var selectedUnit=renderer.gameTileForCoordinate(userInfo.unitSelected,gameboard).unit;return selectedUnit.team===unitStats.TEAMS.PLAYER&&selectedUnit.canMove&&util.isCoordinateInMovementSquares(userInfo.cursor.coordinate,userInfo.unitSelectedAttackSquares)}function enableButtons(){userInfo.buttonsEnabled=true;userInfo.gameInteractionEnabled=true;drawCursor(userInfo.currentMouseCoordinate);gameContainer.classList.remove("interaction-disabled");[endTurnButton,saveGameButton,exitGameButton].forEach(function(button){button.disabled=false})}function disableButtons(){userInfo.buttonsEnabled=false;userInfo.gameInteractionEnabled=false;disableEndTurnButtonAnimation();disableCursor();gameContainer.classList.add("interaction-disabled");[endTurnButton,saveGameButton,exitGameButton].forEach(function(button){button.disabled=true})}function areThereUserUnitsLeftToMove(){for(var i=0;i<gameboard.length;i++){var subarray=gameboard[i];for(var j=0;j<subarray.length;j++){var unit=gameboard[i][j].unit;if(unit&&unit.team===unitStats.TEAMS.PLAYER&&unit.canMove){return true}}}return false}function displayIfAreUnitsLeftToMove(){if(!areThereUserUnitsLeftToMove()){gameControlsContainer.classList.add("all-units-moved")}}function disableEndTurnButtonAnimation(){gameControlsContainer.classList.remove("all-units-moved")}function displayTurnText(text,callback){textOverlay.displayHeading(text,2500,function(){callback()})}function displayUserTurnText(callback){switchMusic(unitStats.TEAMS.PLAYER,unitStats.TEAMS.AI);displayTurnText("Turn "+(userInfo.turnNum+1),callback)}function displayAiTurnText(callback){switchMusic(unitStats.TEAMS.AI,unitStats.TEAMS.PLAYER);displayTurnText("Computer Turn",callback)}function displayLevelFailed(){disableButtons();killMusic();gameContainer.classList.remove("interaction-disabled");mixer.playAudioBuffer(AUDIO_STATS.level.failed.audio);textOverlay.displayMenu("Mission Failed","Restart mission",function(){start(LEVEL_STATS,AUDIO_STATS,userInfo.levelIndex,userInfo.difficultyLevel)})}function displayLevelPassed(){disableButtons();killMusic();gameContainer.classList.remove("interaction-disabled");mixer.playAudioBuffer(AUDIO_STATS.level.passed.audio);if(userInfo.levelIndex<LEVEL_STATS.length-1){textOverlay.displayMenu("Mission Complete","Next mission",function(){start(LEVEL_STATS,AUDIO_STATS,userInfo.levelIndex+1,userInfo.difficultyLevel)})}else{showBriefings(briefings,ready,userInfo.levelIndex+1)}}function saveGame(saveGameName){var serializedGameboard=saveGameController.serializeGameboard(gameboard);var gameMetadata=saveGameController.userInfoToGameMetadata(userInfo);var saveSucceeded=saveGameController.createSave(saveGameName,serializedGameboard,gameMetadata);if(!saveSucceeded){modal.alert("Saving game failed")}else{modal.alert("Game saved")}}function userUnitAttack(startingCoordinate,attackCoordinate,movementCoordinate){disableButtons();var attackCallback=function(){unitAttack(movementCoordinate,attackCoordinate,function(){enableButtons();displayIfAreUnitsLeftToMove()})};var movementSquares=userInfo.unitSelectedMovementSquares.slice();movementSquares.push(startingCoordinate);var validMovementCoordinates=pathfinder.movementCoordinatesForAttackCoordinate(attackCoordinate,movementSquares);if(movementCoordinate===undefined||!validMovementCoordinates.find(function(coordinate){return util.areCoordinatesEqual(coordinate,movementCoordinate)})){if(util.isCoordinateInMovementSquares(startingCoordinate,validMovementCoordinates)){movementCoordinate=startingCoordinate}else{movementCoordinate=validMovementCoordinates[0]}}mixer.playAudioBuffer(AUDIO_STATS.cursor.deselect.audio);moveUnit(startingCoordinate,movementCoordinate,attackCallback)}function unitAttack(attackerCoordinate,defenderCoordinate,doneCallback,isCounterattack){var attackingUnit=renderer.gameTileForCoordinate(attackerCoordinate,gameboard).unit;var attackingTerrain=renderer.gameTileForCoordinate(attackerCoordinate,gameboard).terrain;var defendingUnit=renderer.gameTileForCoordinate(defenderCoordinate,gameboard).unit;var defendingTerrain=renderer.gameTileForCoordinate(defenderCoordinate,gameboard).terrain;if(isCounterattack){var damageDone=damageCalculator.damageForCounterattack(attackingUnit,defendingUnit,attackingTerrain,defendingTerrain,UNIT_STATS,TERRAIN_STATS)}else{var damageDone=damageCalculator.damageForAttack(attackingUnit,defendingUnit,attackingTerrain,defendingTerrain,UNIT_STATS,TERRAIN_STATS)}if(damageDone>=defendingUnit.health){damageDone=defendingUnit.health;defendingUnit.health=0;userInfo.numUnits[defendingUnit.team]--;renderer.gameTileForCoordinate(defenderCoordinate,gameboard).unit=null}else{defendingUnit.health-=damageDone}var attackSound=mixer.playAudioBuffer(AUDIO_STATS.units[attackingUnit.type].attack);renderer.renderAttack(unitCanvasContext,unitSelectionCanvasContext,attackerCoordinate,defenderCoordinate,attackingUnit,defendingUnit,damageDone,function(){if(defendingUnit.health<=0){mixer.playAudioBuffer(AUDIO_STATS.units[defendingUnit.type].die)}setTimeout(function(){mixer.stopSound(attackSound);if(!isCounterattack&&defendingUnit.health>0){unitAttack(defenderCoordinate,attackerCoordinate,doneCallback,true)}else{if(userInfo.numUnits[unitStats.TEAMS.PLAYER]<=0){displayLevelFailed()}else if(userInfo.numUnits[unitStats.TEAMS.AI]<=0){displayLevelPassed()}else{doneCallback()}}},800)})}function moveUserUnit(startingCoordinate,endingCoordinate){disableButtons();mixer.playAudioBuffer(AUDIO_STATS.cursor.deselect.audio);moveUnit(startingCoordinate,endingCoordinate,function(){enableButtons();displayIfAreUnitsLeftToMove()})}function moveUnit(startingCoordinate,endingCoordinate,doneCallback){var unitToBeMoved=renderer.gameTileForCoordinate(startingCoordinate,gameboard).unit;if(util.areCoordinatesEqual(startingCoordinate,endingCoordinate)){unitToBeMoved.canMove=false;renderer.redrawUnit(unitCanvasContext,startingCoordinate,unitToBeMoved);doneCallback();return}var moveSoundEffect=mixer.playAudioBuffer(AUDIO_STATS.units[unitToBeMoved.type].move,true);var path=pathfinder.pathFor(startingCoordinate,endingCoordinate,gameboard,UNIT_STATS,TERRAIN_STATS);renderer.renderUnitMovement(unitCanvasContext,unitSelectionCanvasContext,unitToBeMoved,path,function(){mixer.stopSound(moveSoundEffect,300);renderer.renderUnitMoved(unitCanvasContext,endingCoordinate,unitToBeMoved);unitToBeMoved.canMove=false;gameboard[endingCoordinate.x][endingCoordinate.y].unit=unitToBeMoved;gameboard[startingCoordinate.x][startingCoordinate.y].unit=null;doneCallback()})}function drawUnitMovementPreview(cursorCoordinate){renderer.eraseCanvas(unitSelectionCanvasContext);renderer.renderUnitMovementSquares(unitSelectionCanvasContext,userInfo.unitSelectedMovementSquares);renderer.renderUnitAttackSquares(unitSelectionCanvasContext,userInfo.unitSelectedAttackSquares);renderer.renderUnitSelectionOutline(unitSelectionCanvasContext,userInfo.unitSelected);var path=pathfinder.pathFor(userInfo.unitSelected,cursorCoordinate,gameboard,UNIT_STATS,TERRAIN_STATS);userInfo.unitSelectedShortestPath=path;renderer.renderUnitMovementPreview(unitSelectionCanvasContext,path)}function renderUnitSelected(unitCoordinate){var movementTilesCoordinates=pathfinder.movementCoordinatesFor(unitCoordinate,gameboard,UNIT_STATS,TERRAIN_STATS);userInfo.unitSelectedMovementSquares=movementTilesCoordinates;var attackTilesCoordinates=pathfinder.attackCoordinatesFor(unitCoordinate,gameboard,UNIT_STATS,TERRAIN_STATS);userInfo.unitSelectedAttackSquares=attackTilesCoordinates;renderer.renderUnitMovementSquares(unitSelectionCanvasContext,movementTilesCoordinates);renderer.renderUnitAttackSquares(unitSelectionCanvasContext,attackTilesCoordinates);renderer.renderUnitSelectionOutline(unitSelectionCanvasContext,unitCoordinate);mixer.playAudioBuffer(AUDIO_STATS.cursor.select.audio)}function renderUnitDeselected(){renderer.eraseCanvas(unitSelectionCanvasContext)}function resetGameboardForPlayerTurn(){for(var i=0;i<gameboard.length;i++){var innerArray=gameboard[i];for(var j=0;j<innerArray.length;j++){if(gameboard[i][j].unit&&!gameboard[i][j].unit.canMove){var unit=gameboard[i][j].unit;unit.canMove=true;renderer.renderUnit(unitCanvasContext,{x:i,y:j},unit)}}}}function triggerAiTurn(){displayAiTurnText(function(){aiTurnAction({},function(){resetGameboardForPlayerTurn();userInfo.turnNum++;displayUserTurnText(function(){enableButtons()})})})}function aiTurnAction(memoizationObject,doneCallback){var action=ai.aiAction(gameboard,UNIT_STATS,TERRAIN_STATS,userInfo.difficultyLevel,memoizationObject);if(action.actionType===ai.ACTION_TYPES.END_TURN){doneCallback();return}else if(action.actionType===ai.ACTION_TYPES.ATTACK_UNIT){moveUnit(action.startingCoordinate,action.endingCoordinate,function(){unitAttack(action.endingCoordinate,action.attackedUnitCoordinate,function(){aiTurnAction(action.memoizationObject,doneCallback)})})}else{moveUnit(action.startingCoordinate,action.endingCoordinate,function(){aiTurnAction(action.memoizationObject,doneCallback)})}}function createRandomGameboard(randomLevelIndex){function createRandomUnit(){var unit=unitStats.create(Math.floor(Math.random()*UNIT_STATS.length),Math.floor(Math.random()*2));unit.health=Math.ceil(unit.health*Math.random());unit.currentDirection=Math.floor(Math.random()*2);return unit}var level=LEVEL_STATS[randomLevelIndex];var gameboard=new Array(TOTAL_TILES.x);for(var i=0;i<TOTAL_TILES.x;i++){for(var j=0;j<TOTAL_TILES.y;j++){if(j==0){gameboard[i]=new Array(TOTAL_TILES.y)}gameboard[i][j]={};var terrain=levelLoader.terrainFor(level,i,j,TOTAL_TILES);gameboard[i][j].terrain=terrain;var unit=createRandomUnit();if(UNIT_STATS[unit.type].canTraverse[terrain.type]&&Math.random()*100<10){gameboard[i][j].unit=unit;userInfo.numUnits[unit.team]++}else{gameboard[i][j].unit=null}}}return gameboard}function createGameboard(level){var gameboard=new Array(TOTAL_TILES.x);for(var i=0;i<TOTAL_TILES.x;i++){for(var j=0;j<TOTAL_TILES.y;j++){if(j==0){gameboard[i]=new Array(TOTAL_TILES.y)}gameboard[i][j]={};gameboard[i][j].terrain=levelLoader.terrainFor(level,i,j,TOTAL_TILES);var unit=levelLoader.unitFor(level.dataUnits[userInfo.difficultyLevel],j,i,TOTAL_TILES);gameboard[i][j].unit=unit;if(unit){userInfo.numUnits[unit.team]++}}}return gameboard}function loadGameboard(gameboard,savedGameboard){userInfo.numUnits=Object.keys(unitStats.TEAMS).map(function(){return 0});for(var i=0;i<gameboard.length;i++){var subarray=gameboard[i];for(var j=0;j<subarray.length;j++){var unit=savedGameboard[i][j].unit;gameboard[i][j].unit=unit;if(unit){userInfo.numUnits[unit.team]++}}}}function initializeGame(levelIndex,difficultyLevel,savedGame){userInfo={cursor:{coordinate:null},currentMouseCoordinate:null,unitSelected:false,unitSelectedMovementSquares:false,unitSelectedAttackSquares:false,unitSelectedShortestPath:false,difficultyLevel:difficultyLevel,levelIndex:levelIndex,buttonsEnabled:true,turnNum:0,musicBuffers:[null,null],gameInteractionEnabled:true,numUnits:Object.keys(unitStats.TEAMS).map(function(){return 0})};disableButtons();if(levelIndex<0){var randomLevelIndex=Math.floor(Math.random()*LEVEL_STATS.length);userInfo.levelIndex=randomLevelIndex;gameboard=createRandomGameboard(randomLevelIndex);var levelSpritesheet=LEVEL_STATS[randomLevelIndex].spritesheet}else{gameboard=createGameboard(LEVEL_STATS[levelIndex]);var levelSpritesheet=LEVEL_STATS[levelIndex].spritesheet}if(savedGame){userInfo.turnNum=savedGame.gameMetadata.turnNum;loadGameboard(gameboard,savedGame.gameboard)}renderer.renderLevel(terrainCanvasContext,levelSpritesheet);renderer.renderInitialGameboard(gameboard,unitCanvasContext)}function showBriefings(briefings,ready,levelIndex){if(levelIndex>2){document.getElementById("level").innerHTML="Excellent work! We have reclaimed Capricornus Island. Now that we have taken back our home base, victory will surely be ours. I see a bright future ahead for you. Thanks for all your hard work, soldier!";document.getElementById("ready-btn").innerHTML="Return to Main Menu";briefings.style.display="block";ready.onclick=function(){briefings.style.display="none";menu.displayMainMenu()}}else{if(levelIndex==0){var brief="Welcome recruit to the legendary Capricornus Squadron. We’re glad to have you with us, as we’ve recently had some setbacks and have fallen on hard times. The enemy have taken over the Gemini Bridges, a vital position in our supply line, and we need to take it back. With your help we should be able to do so.</br></br>When attacking remember that infantry have advantages over planes, planes have advantages over tanks, and tanks have advantages over infantry. Also, infantry will take less damage if they are taking cover in mountains or trees. If you keep these things in mind you should be able to claim victory on the battlefield. Good luck out there soldier!"}else if(levelIndex==1){var brief="Well done soldier! Now that we have regained control of the Gemini Bridges we should be able to push through some much needed supplies. We can now make way to the port town of Aquarius - an integral location in the war. Currently the enemy have one of their main bases set up there. If we can overtake them, we should be well on our way to flipping the momentum in our favor.</br></br>Remember that only planes will be able to cross the water here. You can use this advantage to keep them out of harm's way until they are ready to strike. Alright, its time to move in. Keep up the good work."}else if(levelIndex==2){var brief="Great going soldier! If you keep this up, you will be moving up the ranks in no time. We now have just one battle left. It is time to reclaim Capricornus Island. If we can take back what is rightfully ours from the enemies standing guard there, we will surely win the war and regain our legendary status as the greatest squadron in the world!</br></br>Just remember that attacking the nearest enemey may not always be the optimal decision. Sometimes it is better to attack an enemy that is further away if it will give you an advantage or just move away and take cover. Be wary of how far an enemy unit is from you and try to get the first strike on a unit."}document.getElementById("level").innerHTML=brief;document.getElementById("ready-btn").innerHTML="READY";briefings.style.display="block";ready.onclick=function(){briefings.style.display="none";displayUserTurnText(function(){enableButtons()})}}}var gameContainer=document.getElementById("game-container");var gameControlsContainer=document.getElementById("game-controls-container");var endTurnButton=document.getElementById("button-end-turn");var saveGameButton=document.getElementById("button-save-game");var exitGameButton=document.getElementById("button-exit-game");var TOTAL_TILES=renderer.totalTiles(gameContainer);var UNIT_STATS=unitStats.get();var TERRAIN_STATS=terrainStats.get();var UI_STATS=uiStats.get();var cursorCanvasContext=renderer.getContext(gameContainer,"cursor-canvas");var unitSelectionCanvasContext=renderer.getContext(gameContainer,"unit-selection-canvas");var terrainCanvasContext=renderer.getContext(gameContainer,"terrain-canvas");var unitCanvasContext=renderer.getContext(gameContainer,"unit-canvas");var gameboard;var userInfo;var briefings=document.getElementById("briefings");var ready=document.getElementsByClassName("ready")[0];if(savedGame){initializeGame(savedGame.gameMetadata.levelIndex,savedGame.gameMetadata.difficultyLevel,savedGame);displayUserTurnText(function(){enableButtons()})}else{initializeGame(levelIndex,difficultyLevel,savedGame);showBriefings(briefings,ready,userInfo.levelIndex)}gameContainer.onmousemove=function(e){var coordinate=renderer.pixelCoordinateToTileCoordinate({x:e.offsetX,y:e.offsetY});userInfo.currentMouseCoordinate=coordinate;if(!userInfo.gameInteractionEnabled||util.areCoordinatesEqual(coordinate,userInfo.cursor.coordinate)){return}drawCursor(coordinate)};gameContainer.onclick=function(e){if(!userInfo.buttonsEnabled){return}if(userInfo.unitSelected&&renderer.gameTileForCoordinate(userInfo.unitSelected,gameboard).unit.team===unitStats.TEAMS.PLAYER&&renderer.gameTileForCoordinate(userInfo.unitSelected,gameboard).unit.canMove&&util.isCoordinateInMovementSquares(userInfo.cursor.coordinate,userInfo.unitSelectedMovementSquares)){renderUnitDeselected();moveUserUnit(userInfo.unitSelected,util.copyCoordinate(userInfo.cursor.coordinate));userInfo.unitSelected=false;return}if(isOverTriggerPlayerAttackTile()){renderUnitDeselected();userUnitAttack(userInfo.unitSelected,util.copyCoordinate(userInfo.cursor.coordinate),userInfo.unitSelectedShortestPath[userInfo.unitSelectedShortestPath.length-1]);userInfo.unitSelected=false;return}if(userInfo.unitSelected){mixer.playAudioBuffer(AUDIO_STATS.cursor.deselect.audio);userInfo.unitSelected=false;renderUnitDeselected();return}if(!renderer.gameTileForCoordinate(userInfo.cursor.coordinate,gameboard).unit||!renderer.gameTileForCoordinate(userInfo.cursor.coordinate,gameboard).unit.canMove){return}userInfo.unitSelected={x:userInfo.cursor.coordinate.x,y:userInfo.cursor.coordinate.y};renderUnitSelected(userInfo.unitSelected)};endTurnButton.onclick=function(){if(!userInfo.buttonsEnabled){return}disableButtons();renderUnitDeselected();userInfo.unitSelected=false;triggerAiTurn()};saveGameButton.onclick=function(){if(!userInfo.buttonsEnabled){return}modal.prompt("Enter a name for your save game",function(saveGameName){saveGame(saveGameName)})};exitGameButton.onclick=function(){if(!userInfo.buttonsEnabled){return}modal.confirm("Are you sure you want to quit? All unsaved progress will be lost.",function(){killMusic();menu.displayMainMenu()})}}return{start:start}}(app.util,app.renderer,app.unitStats,app.terrainStats,app.pathfinder,app.levelStats,app.ai,app.damage,app.levelLoader,app.modal,app.saveGame,app.mixer,app.menu,app.textOverlay,app.uiStats);"use strict";(function(start,util,levelStats,menu,levelLoader,mixer,audioStats){var levelStatsArray=levelStats.get();var levelUnitDatas=levelStatsArray.map(function(){return[null,null]});var levelTerrainDatas=[];var audioStatsArray=audioStats.get();var cursorAudioKeys=["select","deselect"];var levelAudioKeys=["passed","failed"];var imageSprites=document.querySelectorAll("img.spritesheet");var assetsLeftToLoad=imageSprites.length+3*levelStatsArray.length+3*audioStatsArray.units.length+cursorAudioKeys.length+levelAudioKeys.length+audioStatsArray.music.length;function assetDidLoad(){assetsLeftToLoad--;if(assetsLeftToLoad==0){allAssetsFinishedLoading()}}function allAssetsFinishedLoading(){levelLoader.initializeLevelData(levelStatsArray,levelUnitDatas,levelTerrainDatas);menu.initializeMainMenu(levelStatsArray,audioStatsArray,start);menu.displayMainMenu();document.documentElement.classList.remove("loading")}util.forEach(imageSprites,function(sprite){if(sprite.complete){assetDidLoad()}else{sprite.onload=function(){assetDidLoad()}}});levelStatsArray.forEach(function(level,index){level.dataUnitsUrls.forEach(function(dataUnitUrl,innerIndex){util.getJson(dataUnitUrl,function(json){levelUnitDatas[index][innerIndex]=json;assetDidLoad()})});util.getJson(level.dataTerrainUrl,function(json){levelTerrainDatas[index]=json;assetDidLoad()})});audioStatsArray.units.forEach(function(unitSound){mixer.getAudioBuffer(unitSound.moveUrl,function(buffer){unitSound.move=buffer;assetDidLoad()});mixer.getAudioBuffer(unitSound.dieUrl,function(buffer){unitSound.die=buffer;assetDidLoad()});mixer.getAudioBuffer(unitSound.attackUrl,function(buffer){unitSound.attack=buffer;assetDidLoad()})});cursorAudioKeys.forEach(function(cursorAudioKey){var cursorItem=audioStatsArray.cursor[cursorAudioKey];mixer.getAudioBuffer(cursorItem.url,function(buffer){cursorItem.audio=buffer;assetDidLoad()})});levelAudioKeys.forEach(function(levelAudioKey){var levelItem=audioStatsArray.level[levelAudioKey];mixer.getAudioBuffer(levelItem.url,function(buffer){levelItem.audio=buffer;assetDidLoad()})});audioStatsArray.music.forEach(function(musicInfo){mixer.getAudioBuffer(musicInfo.url,function(buffer){musicInfo.audio=buffer;assetDidLoad()})})})(app.game.start,app.util,app.levelStats,app.menu,app.levelLoader,app.mixer,app.audioStats);
